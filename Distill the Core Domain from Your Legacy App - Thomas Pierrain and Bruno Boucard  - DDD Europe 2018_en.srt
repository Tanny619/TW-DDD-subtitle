1
00:00:00,256 --> 00:00:06,400
Are you ready? Yeah? Okay, here we go.

2
00:00:08,192 --> 00:00:12,800
First question for you, who experienced some difficulties

3
00:00:13,056 --> 00:00:15,616
to grasp DDD concept at the very beginning

4
00:00:15,872 --> 00:00:18,944
while it's the time to put it into your project or into your code?

5
00:00:19,968 --> 00:00:26,112
Yeah ok. So you're not alone. I have to confess

6
00:00:26,368 --> 00:00:28,160
I see a lot of talk about DDD.

7
00:00:28,416 --> 00:00:28,928
And I

8
00:00:29,184 --> 00:00:32,000
tried to apply on legacy code.

9
00:00:34,768 --> 00:00:35,536
So that's why we've made this session.

10
00:00:37,120 --> 00:00:43,264
Absolutely. At this time here we will mostly talk about technical patterns.

11
00:00:44,032 --> 00:00:50,176
And most likely talking about where and how to put your domain experience of your business

12
00:00:50,432 --> 00:00:51,456
into your code.

13
00:00:51,712 --> 00:00:54,272
Much more than strategical pattern. We'll talk a little bit about it.

14
00:00:54,784 --> 00:00:58,112
But it's rather technical.

15
00:00:58,368 --> 00:00:59,392
on the entire session.

16
00:00:59,648 --> 00:01:04,000
Let's introduce ourself maybe before we move?

17
00:01:06,048 --> 00:01:12,192
Oh yeah. So I'm Bruno Boucard. I'm coming from Paris and I'm a coach.

18
00:01:12,448 --> 00:01:18,080
I'm teaching TDD, BDD and DDD.

19
00:01:18,592 --> 00:01:20,640
And I'm in charge of

20
00:01:20,896 --> 00:01:22,688
BDD meet up in Paris.

21
00:01:23,456 --> 00:01:26,784
Ok, my name is Thomas Pierrain.

22
00:01:27,040 --> 00:01:33,184
I'm working software since 18 years. I'm also co-organize the DDD Paris meetup.

23
00:01:33,440 --> 00:01:35,488
I'm kind of opposite, by use cases and

24
00:01:35,744 --> 00:01:36,512
problems based.

25
00:01:36,768 --> 00:01:40,096
Cause I think we jump too much too soon into the solution based.

26
00:01:40,352 --> 00:01:42,912
All our ? and stuff like that, all solutions.

27
00:01:43,424 --> 00:01:45,472
So this is one of my obsession.

28
00:01:45,984 --> 00:01:49,056
Ok we have some gifts

29
00:01:49,568 --> 00:01:50,080
for you.

30
00:01:50,336 --> 00:01:51,872
So we have two books.

31
00:01:52,384 --> 00:01:58,528
The blue one and the Refactoring by Martin Fowler.

32
00:01:59,808 --> 00:02:03,904
So to win those books you would have to tweet as hell during the session.

33
00:02:04,160 --> 00:02:10,304
Using the #DDDEU.

34
00:02:10,560 --> 00:02:11,840
We have a referee here

35
00:02:12,096 --> 00:02:17,216
So he will have a look at that hash tag. And the most

36
00:02:17,472 --> 00:02:23,616
funny tweet or you can record, you can take picture, you can do jokes about us or about you, whatever

37
00:02:23,872 --> 00:02:28,480
and John will tell us the two winners at the end of the session. All right? Cool.

38
00:02:30,784 --> 00:02:33,344
Our domain for today will be train.

39
00:02:34,624 --> 00:02:40,768
Train is kind of large. Actually so we will focus more on the seat reservation optimazation.

40
00:02:42,304 --> 00:02:48,448
Here is the model of a train. The train which has three coaches. Coach A, coach B, and coach C.

41
00:02:48,960 --> 00:02:50,240
Which has some

42
00:02:50,496 --> 00:02:53,312
seats already reserved in the orange.

43
00:02:53,568 --> 00:02:55,104
Empty seats are in white.

44
00:02:55,360 --> 00:02:58,176
And here we are asking 6 seats

45
00:02:58,688 --> 00:03:04,832
to be reserved there in the train in blue. This is a simple model but that may help to understand something.

46
00:03:05,088 --> 00:03:06,624
something. Okay?

47
00:03:06,880 --> 00:03:10,720
We have two business rules for today for the system. The first one is

48
00:03:10,976 --> 00:03:15,584
We should not reserve more than 70% of the entire train capacity.

49
00:03:17,120 --> 00:03:20,448
Okay this is the first business rule.The second business rule is

50
00:03:20,704 --> 00:03:24,032
When I want to reserve, I want all my seats in the same coach.

51
00:03:24,288 --> 00:03:26,848
We don't want to split families and friends

52
00:03:27,104 --> 00:03:29,920
between coaches. Right?

53
00:03:30,176 --> 00:03:30,688
Simple.

54
00:03:30,944 --> 00:03:34,784
We are taking those rules from Emily Bache's Train Reservation.

55
00:03:35,296 --> 00:03:39,392
And we've put some crappy code on top of that but... ok

56
00:03:40,160 --> 00:03:46,304
Our domain expert couldn't manage to be with us in Amsterdam today but we talked a lot with him before

57
00:03:46,560 --> 00:03:47,840
previous weeks.

58
00:03:48,096 --> 00:03:49,632
So he talked a lot about rain

59
00:03:50,144 --> 00:03:53,984
He talked about train ID or identifier. He talked about seats.

60
00:03:54,496 --> 00:03:55,264
Coaches.

61
00:03:56,288 --> 00:04:02,432
Reservation attempts and whether or not these reservation attemps are fulfilled.

62
00:04:02,688 --> 00:04:06,784
And you know there are also to book. If I'm to book,

63
00:04:07,808 --> 00:04:09,600
Booking reference we have explained what it is.

64
00:04:10,368 --> 00:04:12,672
Reservation, reservation failure.

65
00:04:13,184 --> 00:04:19,327
That's the word from the expert. Yeah you know the session we have, those words

66
00:04:19,583 --> 00:04:20,095
kind of

67
00:04:22,399 --> 00:04:28,543
So we will work for a start-up company which name is Train Train. They provide

68
00:04:28,799 --> 00:04:32,127
seat reservation service which is basically web API.

69
00:04:32,383 --> 00:04:36,479
And this web API to do its work, he has to rely on the

70
00:04:36,735 --> 00:04:39,295
external backends provided by external companies

71
00:04:39,807 --> 00:04:42,111
So in fact it's SNCF

72
00:04:42,367 --> 00:04:44,927
So the first backends provided by SNCF,

73
00:04:45,439 --> 00:04:48,255
which is extermal to our company, it's Train Data

74
00:04:48,767 --> 00:04:49,791
Basically it's a

75
00:04:50,047 --> 00:04:51,327
train topology service.

76
00:04:51,583 --> 00:04:54,143
Meaning we provide a train event for you.

77
00:04:54,655 --> 00:04:56,959
And we get back the topology of the train meaning

78
00:04:57,215 --> 00:05:03,359
all the coaches and for every coach, all the seats and for every seat, whether or not it's available

79
00:05:03,615 --> 00:05:04,639
or already reserved.

80
00:05:05,919 --> 00:05:06,431
Okay. Quantity

81
00:05:07,199 --> 00:05:13,343
Second one is the booking reference. This is a kind of tricky one because... not tricky

82
00:05:13,599 --> 00:05:14,623
When you buy a ticket, you have an ID

83
00:05:14,879 --> 00:05:21,023
on your train ticket. This is the idea actually. Yeah. But this is a service that only provide a unique identifier.

84
00:05:21,279 --> 00:05:22,047
We call it

85
00:05:22,303 --> 00:05:23,583
book anything with that.

86
00:05:24,095 --> 00:05:27,423
All we can do is to get a unique identifier

87
00:05:27,679 --> 00:05:28,447
to play with.

88
00:05:29,215 --> 00:05:35,359
And once seat reservation service on the left will have train topology, find available seats,

89
00:05:35,615 --> 00:05:36,127
then,

90
00:05:36,383 --> 00:05:39,199
Getting a booking reference, we actually book

91
00:05:39,711 --> 00:05:40,735
the reservation

92
00:05:40,991 --> 00:05:43,039
through the national train operator service

93
00:05:43,295 --> 00:05:45,855
through the last train booking service.

94
00:05:46,367 --> 00:05:52,511
All right? In terms of we are kind of down streams. We are a tiny start-up in that

95
00:05:52,767 --> 00:05:58,655
open market that hasn't been opened recently. So these are the back-end provided by the national train.

96
00:05:59,167 --> 00:06:00,447
Is it ok for all of you?

97
00:06:01,727 --> 00:06:02,495
We will continue.

98
00:06:03,519 --> 00:06:07,615
Maybe Bruno we can do a demo of the web API

99
00:06:10,175 --> 00:06:10,943
It will take a few

100
00:06:11,199 --> 00:06:12,223
seconds to

101
00:06:12,479 --> 00:06:13,247
switch.

102
00:06:16,575 --> 00:06:17,855
So

103
00:06:18,111 --> 00:06:19,903
I use postman

104
00:06:20,159 --> 00:06:27,231
where you can see the url to call the web API.

105
00:06:27,327 --> 00:06:29,375
And we can see the body

106
00:06:29,631 --> 00:06:33,471
The payload is with two fields.

107
00:06:33,727 --> 00:06:36,031
Train_id is the identifier of the train.

108
00:06:36,287 --> 00:06:39,359
And the number_of_seats requested.

109
00:06:40,127 --> 00:06:40,639
Ok

110
00:06:42,431 --> 00:06:43,711
So if you post.

111
00:06:43,967 --> 00:06:45,247
Yeah.

112
00:06:45,759 --> 00:06:46,527
Take a while.

113
00:06:50,367 --> 00:06:53,695
Still loading. Okay and we have a answer.

114
00:06:53,951 --> 00:06:54,975
The answer.

115
00:06:55,231 --> 00:06:57,023
The first is the train_id.

116
00:06:57,535 --> 00:06:58,047
Okay?

117
00:06:58,303 --> 00:07:00,351
Second one is a booking reference.

118
00:07:00,607 --> 00:07:03,423
Allocated by service as I said before.

119
00:07:03,679 --> 00:07:05,215
And the list of seats

120
00:07:05,983 --> 00:07:11,031
We get back.

121
00:07:13,151 --> 00:07:17,503
Okay. So basically that's quite simple way to interact with our system. Yeah.

122
00:07:25,183 --> 00:07:30,559
Okay. And basically we have a problem. And this is reason why we are here today.

123
00:07:31,071 --> 00:07:35,935
Train Train start-up, called us because they face recurrent penalties,

124
00:07:36,447 --> 00:07:41,311
Excess of penalties by the national train service.

125
00:07:42,079 --> 00:07:43,103
Why?

126
00:07:43,359 --> 00:07:44,383
Every call

127
00:07:44,895 --> 00:07:49,759
You made on all those back-ends, you pay fees. So that means that start-up the Train Train start-up.

128
00:07:50,271 --> 00:07:55,647
Every time you call one of those web API is charged from these.

129
00:07:55,903 --> 00:07:57,439
So they are expected

130
00:07:57,695 --> 00:07:58,719
to do so. But,

131
00:07:59,231 --> 00:08:01,023
they think they are paying too much.

132
00:08:01,279 --> 00:08:03,327
So they asked us to have a look at the code.

133
00:08:03,583 --> 00:08:04,351
And to see

134
00:08:04,607 --> 00:08:08,447
what may be the reason and can we troubleshoot and fix

135
00:08:08,703 --> 00:08:09,983
if we have something to fix

136
00:08:11,519 --> 00:08:17,407
Okay? But before touching any legacy code, if you are... Bruno and I, what would you recommend

137
00:08:19,455 --> 00:08:20,223
us to do?

138
00:08:22,015 --> 00:08:23,807
(Test?) Test, yes absolutely.

139
00:08:24,319 --> 00:08:29,439
In fact, this is the reason why we miss the keynote. We have a bit test on this this morning.

140
00:08:30,207 --> 00:08:33,023
Discovering the code in trying to highlight

141
00:08:33,279 --> 00:08:38,655
all those business rules. So we've made so far 3 exception tests.

142
00:08:39,167 --> 00:08:44,543
First on is a happy pass. We have a train with only one coach

143
00:08:45,055 --> 00:08:49,151
with 10 seats. And we want allocate or reserve 3 seats.

144
00:08:49,407 --> 00:08:52,991
And as you can see that's exactly what I do with postman. And exactly the same answer.

145
00:08:57,855 --> 00:08:59,391
Simple happy pass. Ok.

146
00:09:00,159 --> 00:09:01,695
Second one is the

147
00:09:02,207 --> 00:09:08,351
Yeah this is the first business rule.  We can't exceed 70%,

148
00:09:08,607 --> 00:09:14,751
for reservation , in all the train. And if we ask 2 seats,

149
00:09:15,007 --> 00:09:16,543
and you can see I already have 6 seats reserved,

150
00:09:17,567 --> 00:09:18,335
Here.

151
00:09:19,871 --> 00:09:22,431
Because I applied the rule,

152
00:09:22,943 --> 00:09:28,831
So 70% is 7 seats in the train you can sit. Exactly. So the way to repond an error

153
00:09:29,343 --> 00:09:30,111
is this one

154
00:09:30,623 --> 00:09:33,183
I get the train ID but the booking reference is empty.

155
00:09:33,439 --> 00:09:34,975
And the list of seats are empty.

156
00:09:35,487 --> 00:09:38,047
This is how Train Train is telling us, no

157
00:09:38,559 --> 00:09:40,095
reservation has been made for you.

158
00:09:41,375 --> 00:09:41,887
Ok.

159
00:09:42,143 --> 00:09:48,031
And the third test was... test highlighting the all seats must be in the same coach please.

160
00:09:48,543 --> 00:09:49,823
The second business rule.

161
00:09:50,079 --> 00:09:53,663
And in that case we found a bug. We found a bug because we asked

162
00:09:54,175 --> 00:10:00,319
here we have a train with two coaches. And one is almost full.

163
00:10:00,831 --> 00:10:03,135
The other is completely free. And when we asked 2 seats,

164
00:10:03,647 --> 00:10:09,279
Actually we get here. One seat in coach A and one seat in coach B, which was unexpected because

165
00:10:09,535 --> 00:10:11,071
we don't want to split families and friends.

166
00:10:11,839 --> 00:10:14,143
So we're thinking about that. Bruno was saying that

167
00:10:15,423 --> 00:10:18,239
it may explain something related to this phase.

168
00:10:18,495 --> 00:10:21,567
You have some ideas about what may explain the extra phase.

169
00:10:23,871 --> 00:10:25,407
Imagine you use

170
00:10:25,663 --> 00:10:26,431
the website.

171
00:10:26,943 --> 00:10:28,223
You call the service.

172
00:10:29,247 --> 00:10:31,039
And you prepare a trip

173
00:10:31,295 --> 00:10:33,087
With your family or your

174
00:10:33,855 --> 00:10:35,391
girlfriend boyfriend.

175
00:10:36,183 --> 00:10:40,183
What happened? （Maybe you want to cancel your reservation because you cannot sit with your firend.)

176
00:10:41,279 --> 00:10:45,375
Yeah. Exactly. The answer is to cancel.

177
00:10:45,631 --> 00:10:52,263
Because I'm not pleased to have 2 seats in 2 different coaches. We cancel maybe retry it.

178
00:10:52,543 --> 00:10:57,663
Cancel retry, cancel retry, at the end of the day I will switch to another provider.

179
00:10:57,919 --> 00:10:58,943
I will left Train Train.

180
00:10:59,199 --> 00:11:00,479
Poor experience.

181
00:11:00,735 --> 00:11:05,087
But it may explain that because every time every attempt will be charged actually.

182
00:11:05,599 --> 00:11:08,671
So that was our hypothesis.

183
00:11:09,183 --> 00:11:12,511
And we discussed it with domain expert and he said, yeah,

184
00:11:12,767 --> 00:11:16,351
maybe a new answer, please

185
00:11:16,863 --> 00:11:18,399
guys can you please fix that bug.

186
00:11:18,655 --> 00:11:23,519
So we are here to fix that bug all together. And we will ask you to help us in the journey.

187
00:11:25,055 --> 00:11:27,103
So what would you recommend to fix that bug?
大家现在有什么建议吗？

188
00:11:27,359 --> 00:11:40,639
What would be your strategy?

189
00:11:41,439 --> 00:11:47,327
We are the train reservation service on the left on the Orange. Here, let me...ok

190
00:11:49,119 --> 00:11:52,703
We are only working on that seat reservation in the yellow.

191
00:11:53,727 --> 00:11:59,055
These are dependencies. We don't have leverage on that actually. (Are you the only cosumer for these)

192
00:12:00,127 --> 00:12:06,271
No we compete with other companies. We are start-up and we compete with other companies.

193
00:12:06,527 --> 00:12:11,391
We need some information from those two and we need to set and to comfirm

194
00:12:11,647 --> 00:12:12,159
and to book

195
00:12:12,671 --> 00:12:14,463
to make transaction with that guy

196
00:12:14,975 --> 00:12:15,487
So

197
00:12:15,999 --> 00:12:17,279
That's kind of interaction we have.

198
00:12:19,327 --> 00:12:23,143
So it's time for the strategy what would you recommend? (Writing tests?)

199
00:12:23,679 --> 00:12:24,191
Write tests.

200
00:12:24,447 --> 00:12:25,215
Yeah write tests.

201
00:12:25,471 --> 00:12:31,615
So actually we already wrote 2 tests so that highlight the bug. So we will have to fix that test. Ok?

202
00:12:33,663 --> 00:12:35,711
So let's dive into the code.

203
00:12:35,967 --> 00:12:36,735
Bruno has

204
00:12:37,247 --> 00:12:38,271
set breakpoints

205
00:12:39,807 --> 00:12:40,575
We can call it here. Yeah absolutely. Just a minute.

206
00:12:43,135 --> 00:12:44,415
It's launching the bug

207
00:12:45,951 --> 00:12:47,743
So here if you

208
00:12:48,255 --> 00:12:51,071
just slide to the left side of the screen

209
00:12:51,583 --> 00:12:56,447
It's a C# code. It's a asp.net code API.

210
00:12:56,703 --> 00:13:02,847
It's simple for those who are doing java spring boot. It's simple for... When we request that post on networks

211
00:13:03,103 --> 00:13:04,127
with that name

212
00:13:04,383 --> 00:13:07,455
We get that call back

213
00:13:08,479 --> 00:13:12,575
And it's a ReservationRequestDto we receive.

214
00:13:13,087 --> 00:13:18,975
Just to have a look at the Dto. It's very simple, exactly the payload of the json.

215
00:13:19,743 --> 00:13:20,511
Absolutely.

216
00:13:22,559 --> 00:13:28,703
And so after all that, we installed that, if you can slide to the left, thank you. So we installed that

217
00:13:28,959 --> 00:13:33,567
webTicketManager which it seems to be the entry point of the system and we call reserve

218
00:13:34,079 --> 00:13:35,103
method on it,

219
00:13:35,359 --> 00:13:36,895
providing train id and the number of seat requested.

220
00:13:38,943 --> 00:13:39,967
Ok so

221
00:13:40,735 --> 00:13:44,063
This is what we have test so far

222
00:13:44,575 --> 00:13:47,135
If we have a look at the tests. These are failing.

223
00:13:49,951 --> 00:13:50,719
We have 3 tests.

224
00:13:51,743 --> 00:13:54,815
It's like kind of exception tests. We consider these items as black bugs.

225
00:13:55,583 --> 00:13:59,167
And we sent some requests and we checked the

226
00:14:00,703 --> 00:14:01,727
json.

227
00:14:01,983 --> 00:14:03,775
The last one is the test

228
00:14:04,031 --> 00:14:05,823
demonstrate the problem. Ok?

229
00:14:06,079 --> 00:14:11,199
So wait. We have a tool, it's name is ?  We see every time we change

230
00:14:11,455 --> 00:14:17,599
something, we type something, we change the code. It will run the test in background, execute it,

231
00:14:17,855 --> 00:14:23,999
and provide us a feedback loop with a colored arrow on the margin.

232
00:14:24,255 --> 00:14:26,303
So green is fine and red is

233
00:14:26,559 --> 00:14:30,399
there's a problem. And there's an arrow in Red.

234
00:14:30,911 --> 00:14:31,423
Bruno, if you...

235
00:14:31,679 --> 00:14:33,983
Yeah I will show. Have another view of the error.

236
00:14:35,007 --> 00:14:39,103
Basically it's the problem. We are expecting to have

237
00:14:39,615 --> 00:14:42,431
2 seats in 1B and 2B. And actually we get

238
00:14:42,943 --> 00:14:47,295
10A and 1B. So this is the bug we discuss earlier.

239
00:14:48,575 --> 00:14:50,111
Ok everyone?

240
00:14:50,879 --> 00:14:57,023
I think it would be a good thing to stop to have another view of what the Reserve method is doing.

241
00:14:57,279 --> 00:15:01,119
I'll just align the code for you.

242
00:15:01,631 --> 00:15:07,519
Let's have a first overview. We discovered that this morning so we will have

243
00:15:07,775 --> 00:15:12,383
a little bit more knowledge about it. So I will try to help you to

244
00:15:12,639 --> 00:15:13,663
to have an overview.

245
00:15:14,431 --> 00:15:20,575
First we ? a list of available seats. That should be

246
00:15:20,831 --> 00:15:22,367
probably the result of the method.

247
00:15:22,879 --> 00:15:25,695
Then we call a get train on a trainDataService.

248
00:15:26,207 --> 00:15:32,351
And we get something like we call jsonTrain. Maybe is a json topology we will see it after.

249
00:15:33,631 --> 00:15:39,751
Then we install a train. A train installs of ? json topology.

250
00:15:40,287 --> 00:15:44,895
And after that train installed, we do some business rules here and there. So here,

251
00:15:45,407 --> 00:15:51,551
if the number of seat already reserved in the train plus the number of seats I'm requesting

252
00:15:52,063 --> 00:15:53,087
is below,

253
00:15:53,599 --> 00:15:56,159
is below something like GetMaxRes, let me check.

254
00:15:56,415 --> 00:16:00,511
Should be some percentage or something like that. Yeah, 70%.

255
00:16:01,023 --> 00:16:01,535
Ok.

256
00:16:01,791 --> 00:16:04,815
70% of the overall train capacity.

257
00:16:04,863 --> 00:16:05,887
So if

258
00:16:06,143 --> 00:16:09,983
I respect the first business rule, I continue.

259
00:16:10,751 --> 00:16:15,871
I continue. The numberOfReserv seems to be an accumulator variable here

260
00:16:16,127 --> 00:16:18,431
And we tried to find some available seats.

261
00:16:19,199 --> 00:16:24,575
An availble seat in that system is the one that the BookingRef is empty.

262
00:16:25,087 --> 00:16:29,951
We have a property and if it's empty string,

263
00:16:30,463 --> 00:16:32,255
that means that seat is available

264
00:16:32,511 --> 00:16:33,791
And then we can add it

265
00:16:34,047 --> 00:16:34,815
into the list.

266
00:16:35,071 --> 00:16:37,887
The list that we will return at the end of the method

267
00:16:38,399 --> 00:16:39,679
Is it okay for you so for?

268
00:16:41,471 --> 00:16:46,079
Then we have a kind of stupid forEach. We haven't seen that in years ago.

269
00:16:46,335 --> 00:16:50,175
Oh then what do we have yes if we can't

270
00:16:50,943 --> 00:16:56,063
find the number of seat requested, what do we do? We get the answer, you know,

271
00:16:56,319 --> 00:16:59,135
the result that is saying that you can't even reserve.

272
00:16:59,647 --> 00:17:03,231
Remember, it's a failing message.

273
00:17:03,743 --> 00:17:09,887
If it work, that when we call the bookingReferenceService, the one in the middle on the right side.

274
00:17:10,911 --> 00:17:12,447
And call GetBookingReference.

275
00:17:13,983 --> 00:17:15,007
Then we

276
00:17:15,263 --> 00:17:19,615
assign a booking reference to every one of the available seat that we have found.

277
00:17:20,383 --> 00:17:21,151
So far

278
00:17:21,407 --> 00:17:23,967
We have a bunch of accumulators here.

279
00:17:24,479 --> 00:17:26,271
And then, again, it's

280
00:17:26,527 --> 00:17:32,671
pretty much the same if. If you look at...Yeah it seems similar. No the first one is negative.

281
00:17:32,927 --> 00:17:33,951
Not really same. But,

282
00:17:34,207 --> 00:17:40,351
if it's still ok, oh we use the cache? Yeah. Interesting.

283
00:17:40,863 --> 00:17:42,399
We will see that...why, okay?

284
00:17:42,655 --> 00:17:48,799
And then what do we... Actually this is the one that is making the booking, you know.

285
00:17:49,055 --> 00:17:49,567
Transaction actually.

286
00:17:49,823 --> 00:17:54,175
It will be the external web API we call to book a seat.

287
00:17:54,687 --> 00:17:55,455
If I

288
00:17:55,967 --> 00:17:56,991
enter that,

289
00:17:58,527 --> 00:17:59,295
let me check,

290
00:17:59,551 --> 00:18:01,343
here the implemetation.

291
00:18:01,599 --> 00:18:07,231
Yeah basically we call a web API.

292
00:18:07,487 --> 00:18:09,399
Real Interesting.

293
00:18:09,535 --> 00:18:13,375
And it seems that if we don't have any kind of exception here,

294
00:18:13,887 --> 00:18:16,447
what do we do? We return the answer.

295
00:18:17,983 --> 00:18:21,567
And the answer is the one dumping the list of seats

296
00:18:22,079 --> 00:18:24,127
we have found so far. Okay?

297
00:18:24,639 --> 00:18:30,783
And the case here, what was it? Yes, in the case of the train capacity limit

298
00:18:31,039 --> 00:18:33,343
has been exceeded,

299
00:18:33,599 --> 00:18:38,719
we return the empty... you can't reserve anything in that train. It's a failure.

300
00:18:39,743 --> 00:18:41,279
Ok for everyone of you?

301
00:18:42,559 --> 00:18:45,631
We will make a few review working on it. But,

302
00:18:45,887 --> 00:18:47,167
do you have some

303
00:18:47,679 --> 00:18:49,703
feedback about that so far？

304
00:18:49,471 --> 00:18:54,971
(Why are you using string concatenation to create json?)

305
00:18:55,103 --> 00:18:57,919
Why are we using string concatenation to create json?

306
00:18:59,199 --> 00:19:00,479
Actually this is not our code.

307
00:19:00,735 --> 00:19:06,879
As a declarer. This is a customer we discover this morning. So yes, but this is a good remark, why do we

308
00:19:09,695 --> 00:19:15,839
append a json here in the middle of something that, it's expected to be some kind of

309
00:19:16,095 --> 00:19:17,119
business logic.

310
00:19:19,935 --> 00:19:26,079
(Prove it with a github link.) We don't even use git in that project. You know.

311
00:19:26,335 --> 00:19:34,151
So I can't do that. (Maybe I think the business logic is quite intermixed all togather in one function?)

312
00:19:34,215 --> 00:19:35,807
Yeah, you are right.

313
00:19:36,063 --> 00:19:37,855
Yeah absolutely. Yeah.

314
00:19:38,367 --> 00:19:44,255
That is a strategy we will try to apply with you. We try to discover

315
00:19:45,791 --> 00:19:49,327
the domain concept through this code.

316
00:19:50,143 --> 00:19:55,775
And we try to figure out how can we improve that because so far there's something that's really bother me.

317
00:19:57,055 --> 00:20:00,347
We were talking about the domain expert

318
00:20:00,639 --> 00:20:02,687
talking with us with tons of concepts.

319
00:20:03,967 --> 00:20:06,783
Can you see apart the train, and the

320
00:20:07,039 --> 00:20:10,367
concept of seat, do you see any

321
00:20:10,623 --> 00:20:12,991
other concept as well?

322
00:20:13,183 --> 00:20:16,463
There's something missing. (Coach isn't explained. )

323
00:20:16,511 --> 00:20:19,839
Yeah. The concept of coach is completely missing here.

324
00:20:20,095 --> 00:20:22,631
And other stuff? (Reservation?)

325
00:20:22,655 --> 00:20:27,775
Reservation, absolutely. No reservation. No reservation at time so far.

326
00:20:28,031 --> 00:20:30,591
So, who have experienced code like this?

327
00:20:32,127 --> 00:20:33,151
In this case. Some of you.

328
00:20:34,943 --> 00:20:41,087
So we are not alone. So the idea here, for us will be to have a kind of way of

329
00:20:41,343 --> 00:20:42,111
improving it.

330
00:20:42,367 --> 00:20:43,135
Because,

331
00:20:43,391 --> 00:20:46,463
since we don't have any kind of coach here,

332
00:20:46,719 --> 00:20:52,559
the strategy for us to fix the bug would be to make it

333
00:20:52,863 --> 00:20:54,655
But before that,

334
00:20:54,911 --> 00:20:57,471
there's so much crappy thing and like that.

335
00:20:57,727 --> 00:20:59,007
So let's clean,

336
00:20:59,263 --> 00:21:00,799
first clean the deck? Yeah.

337
00:21:01,055 --> 00:21:03,103
Do you know the name clean the deck?

338
00:21:03,359 --> 00:21:04,895
The expression clean the deck? No?

339
00:21:05,407 --> 00:21:06,943
Clean the deck

340
00:21:07,455 --> 00:21:10,527
is the first phase when you discover a code,

341
00:21:10,783 --> 00:21:14,367
because you need to be more confident before

342
00:21:14,623 --> 00:21:18,208
to apply deep refactoring.

343
00:21:18,464 --> 00:21:23,280
It's a way to discover, fix a little

344
00:21:24,096 --> 00:21:25,888
names of the variables, for example,

345
00:21:26,656 --> 00:21:27,424
And after,

346
00:21:28,192 --> 00:21:34,336
get into the program. Yeah, it's a way to prepare our mental model in your head.

347
00:21:35,992 --> 00:21:40,736
So come back from the beginning, so clean the deck, you will have another view,

348
00:21:40,992 --> 00:21:42,272
trying to improve a little bit.

349
00:21:42,528 --> 00:21:45,344
but before that.

350
00:21:47,392 --> 00:21:53,024
(You have typo in 63.) We have typo in 63? Yeah yeah, it's for sure, for sure. It's really a legacy code.

351
00:21:54,560 --> 00:21:56,864
But you notice something wrong? We'll fix that.

352
00:21:57,888 --> 00:21:58,912
It's red.

353
00:21:59,424 --> 00:22:00,704
It's difficult to

354
00:22:01,472 --> 00:22:05,568
be confident if my code is red because if I made

355
00:22:05,824 --> 00:22:06,592
a mistake,

356
00:22:07,104 --> 00:22:10,176
I don't see the mistake. I prefer to see green

357
00:22:10,688 --> 00:22:11,968
in my tool. So

358
00:22:12,480 --> 00:22:13,248
to do that,

359
00:22:14,016 --> 00:22:17,600
we'll completely ignore the test and just search the bug.

360
00:22:18,112 --> 00:22:19,136
It's a good technique

361
00:22:19,392 --> 00:22:22,720
if you're in the same situation when the test is failing,

362
00:22:23,488 --> 00:22:26,304
and you need to refactor just before fixing the bug

363
00:22:26,816 --> 00:22:30,400
you ignore that test and just search the bug.

364
00:22:30,656 --> 00:22:36,800
So that it's green you have a test on this. You refactor and then you enable back the test to fix the bug.

365
00:22:37,568 --> 00:22:39,080
So this is what

366
00:22:39,360 --> 00:22:40,896
you're doing. And white

367
00:22:41,152 --> 00:22:50,784
is meaning we don't run the test. And now I'm ready. (Fast question. Does it look better to

368
00:22:51,392 --> 00:22:51,904
create a test, which test the

369
00:22:56,000 --> 00:22:57,024
current behavior,

370
00:22:58,560 --> 00:23:00,608
because when your refactoring, you want to basically

371
00:23:02,144 --> 00:23:04,192
maintain the current behaviour.) Yeah.

372
00:23:05,216 --> 00:23:09,568
(So by creating a new test, so that ignore the old test.) Absolutely. (By creating a new test which test the

373
00:23:12,128 --> 00:23:13,664
current behaviour, you can't basically break it.)

374
00:23:15,200 --> 00:23:19,552
Yeah. That is a technique I like a lot which is a golden master.

375
00:23:20,064 --> 00:23:21,856
Golden master is you take a legacy code,

376
00:23:22,368 --> 00:23:23,136
you clone it,

377
00:23:23,648 --> 00:23:27,232
and you write acceptance tests.

378
00:23:27,488 --> 00:23:34,632
Every time I send that input into the legacy code and the new instance, which is the one I will work on,

379
00:23:34,656 --> 00:23:37,216
I'm expecting to see the same output

380
00:23:37,472 --> 00:23:39,264
on both instances.

381
00:23:39,520 --> 00:23:40,800
So that without

382
00:23:41,056 --> 00:23:43,616
even understanding the legacy,

383
00:23:43,872 --> 00:23:45,152
I can have a test on this.

384
00:23:45,408 --> 00:23:50,528
Making me and forcing me... I don't break any existing behavior.

385
00:23:51,040 --> 00:23:57,184
So this is a strategy that we could have done. But here we are implementing the business rule

386
00:23:57,440 --> 00:23:58,976
as a domain expertise.

387
00:23:59,488 --> 00:24:05,632
So we will stick to that point for now. But it's a good way for refactor.

388
00:24:07,168 --> 00:24:08,704
Just clean the deck Bruno.

389
00:24:08,960 --> 00:24:10,752
The first variable,

390
00:24:11,776 --> 00:24:17,056
this is as noticeable, the variable seat.

391
00:24:17,920 --> 00:24:20,444
I'll just have a look

392
00:24:20,736 --> 00:24:23,808
where is used. Far from the usage. Yeah, far.

393
00:24:24,576 --> 00:24:25,088
So

394
00:24:26,880 --> 00:24:27,904
maybe,

395
00:24:29,952 --> 00:24:32,768
I can decide to move this one

396
00:24:33,280 --> 00:24:35,328
close to the usage.

397
00:24:37,632 --> 00:24:40,704
Here for example. In the back of the room can you see all the code?

398
00:24:40,960 --> 00:24:47,104
Because my test is running in real time I know I'm not breaking the code. It's still green.

399
00:24:48,896 --> 00:24:55,040
The behavior of the C programmer, because I was a C programmer, was to put

400
00:24:55,296 --> 00:24:58,112
all the variable at the beginning of the code.

401
00:24:58,368 --> 00:24:59,904
So this is your...?

402
00:25:00,160 --> 00:25:06,304
No it's not mine. Ok, second one is count.

403
00:25:07,840 --> 00:25:10,656
Count, so... What a name.

404
00:25:11,424 --> 00:25:12,448
Yeah, count, wow.

405
00:25:13,984 --> 00:25:17,568
What a stupid loop. Yeah, we're looping on the list.

406
00:25:17,824 --> 00:25:19,872
Actually it's a list of property count.

407
00:25:20,128 --> 00:25:22,432
It's exactly the same number.

408
00:25:22,688 --> 00:25:28,832
We have a hint here. It's unused. Maybe ? developer want to say something?

409
00:25:29,392 --> 00:25:34,208
So what I can do is maybe to use

410
00:25:34,720 --> 00:25:35,488
availabelSeats.

411
00:25:35,744 --> 00:25:36,512
And apply count property.

412
00:25:36,768 --> 00:25:40,864
Yeah because at the end of the for each loop, count will have the same

413
00:25:41,120 --> 00:25:43,680
value as availableSeats. I can remove this one.

414
00:25:43,936 --> 00:25:44,448
Okay?

415
00:25:45,216 --> 00:25:46,240
Cool, I'll leave it.

416
00:25:46,496 --> 00:25:50,848
On this screen hight, do we have ah...before we...We can check.

417
00:25:51,616 --> 00:25:52,640
One, two.

418
00:25:53,664 --> 00:25:54,176
Two

419
00:25:54,432 --> 00:25:56,736
Two and a half? Two and a half, yeah.

420
00:25:57,504 --> 00:26:00,576
So that was another thing that bother me to have a method like that.

421
00:26:01,344 --> 00:26:02,112
Ok.

422
00:26:03,392 --> 00:26:10,536
Ok, this is a code for the train topology.

423
00:26:11,072 --> 00:26:12,352
Maybe we can rename it?

424
00:26:14,400 --> 00:26:15,424
Yeah. Ok?

425
00:26:15,680 --> 00:26:16,192
Train topology?

426
00:26:16,448 --> 00:26:17,216
Yeah that' fine.

427
00:26:17,472 --> 00:26:23,616
Traintopol and you can...Topology is better. That may explain we were talking about

428
00:26:23,872 --> 00:26:30,016
the  train topology. So that's better. Okay, trainInst.

429
00:26:30,528 --> 00:26:32,320
Instruction? Instance?

430
00:26:32,832 --> 00:26:37,952
We asked domain expert about that, he said no I'm not aware of train instance by domain. So,

431
00:26:38,464 --> 00:26:44,352
should be train install maybe or. So let's treat its name into train. Yeah. So you install a train from a trainTopology ok? Yeah.

432
00:26:45,632 --> 00:26:48,192
What is this guy?

433
00:26:48,448 --> 00:26:52,032
numberOfReserv. Maybe you can just...

434
00:26:52,288 --> 00:26:57,152
Put it here for people in the back to see everything. Ok. You see this one?

435
00:26:58,944 --> 00:27:02,272
numberOfReserv. Is it used? Yeah.

436
00:27:03,040 --> 00:27:05,088
It's a pattern actually.

437
00:27:05,344 --> 00:27:09,696
We use a variable

438
00:27:09,952 --> 00:27:16,096
for nothing and... Just in case the calculation, that count is wrong maybe you can have a...

439
00:27:16,352 --> 00:27:19,936
Maybe that's intends? I don't know.

440
00:27:20,192 --> 00:27:24,776
Some times we don't have to try to understand. This is just silly stuff.

441
00:27:26,848 --> 00:27:29,408
Ok, so I can remove this one.

442
00:27:29,664 --> 00:27:32,480
Ok so you get rid of it. Yeah I get rid of this one.

443
00:27:35,040 --> 00:27:35,808
Ok you can delete it.

444
00:27:36,064 --> 00:27:36,576
Yeah.

445
00:27:36,832 --> 00:27:42,976
Maybe...Each is？ Each...

446
00:27:43,232 --> 00:27:47,840
It's seat. Yes, from collection of Seats, we get a seat.

447
00:27:48,608 --> 00:27:53,216
This is a typo. reservedSet.

448
00:27:53,728 --> 00:27:59,872
We don't talk about set. We've asked the domain expert also, do we even have set? They said no. This is a loop too.

449
00:28:03,968 --> 00:28:04,992
But never used.

450
00:28:06,272 --> 00:28:07,808
Who has already seen that kind of

451
00:28:08,064 --> 00:28:13,696
variables, declarations in the code not even used anymore

452
00:28:14,976 --> 00:28:16,512
Yeah. Legacy code is full of

453
00:28:16,768 --> 00:28:18,280
this kind of stuff.

454
00:28:18,816 --> 00:28:21,376
And it's kind of polluting our mind.

455
00:28:23,424 --> 00:28:24,704
This one.

456
00:28:24,960 --> 00:28:27,008
Have a look at this one. We have

457
00:28:29,056 --> 00:28:32,896
a if here. And we have pretty much the same if at the invest?

458
00:28:34,176 --> 00:28:35,200
Yeah I'll just...

459
00:28:35,456 --> 00:28:44,600
We like symmetry it's much better to compare stuff. To do so, as we suggested, to invest? Yeah, it's a good a idea.

460
00:28:44,928 --> 00:28:47,232
Indent, invest if, and then,

461
00:28:47,488 --> 00:28:50,304
ok we can see pretty much the same...

462
00:28:51,328 --> 00:28:53,632
I will select...No, no, wait.

463
00:28:53,888 --> 00:28:54,656
Just illustrate it.

464
00:28:56,192 --> 00:28:58,752
Here, as you can see there is one if. Here.

465
00:29:00,032 --> 00:29:02,080
And pretty much the same here.

466
00:29:02,592 --> 00:29:08,224
So the idea is since there is nothing in the middle we can cut the code into the if below.

467
00:29:08,480 --> 00:29:11,552
And put it into the end of the first if.

468
00:29:11,808 --> 00:29:14,880
This one, just at the end, to respect the algorithm.

469
00:29:16,928 --> 00:29:17,440
So

470
00:29:18,976 --> 00:29:22,560
it will simplify a little bit the code structure also.

471
00:29:22,816 --> 00:29:26,912
It's really great. Green yeah. Okay?

472
00:29:27,936 --> 00:29:28,448
So now you can...Read

473
00:29:28,704 --> 00:29:34,848
Why are you doing that? Because... It's white. Yeah. Entrnce?, when the code

474
00:29:35,104 --> 00:29:36,640
is not covered,

475
00:29:38,432 --> 00:29:38,944
put a white

476
00:29:39,200 --> 00:29:40,480
indicator.

477
00:29:41,248 --> 00:29:42,016
It's a

478
00:29:42,528 --> 00:29:45,600
good for us. This one is not necessary too.

479
00:29:48,160 --> 00:29:50,464
Ok, you can remove some lines.

480
00:29:50,720 --> 00:29:52,256
So I think we...

481
00:29:52,512 --> 00:29:58,144
have some space? Yeah maybe this one can be closer to the usage.

482
00:29:58,912 --> 00:29:59,936
Ok.

483
00:30:01,472 --> 00:30:02,496
Ok so you

484
00:30:03,008 --> 00:30:06,848
closer the declaration to the usage. And it's not perfect, but

485
00:30:07,360 --> 00:30:09,408
we changed a little bit.

486
00:30:09,920 --> 00:30:14,272
Not so much. It's not really a deep refactory. It's just to be more confident.

487
00:30:14,528 --> 00:30:17,344
It's the first round, the first pass on the code,

488
00:30:17,600 --> 00:30:20,416
when improving our mental model about it

489
00:30:20,928 --> 00:30:22,976
and trying to clean up some mess.

490
00:30:26,000 --> 00:30:28,304
Ok, something better you?

491
00:30:29,072 --> 00:30:29,584
Yep

492
00:30:30,096 --> 00:30:31,888
Can you see what's still bothering

493
00:30:32,656 --> 00:30:35,728
Ok it's still very procedural code, one method, too screen high

494
00:30:36,240 --> 00:30:39,824
doing this and then doing that and then do this ok

495
00:30:40,592 --> 00:30:41,616
Collection script

496
00:30:45,968 --> 00:30:50,832
Yeah, Here "get the train" is useless

497
00:30:51,088 --> 00:30:52,624
so we cut it

498
00:30:53,136 --> 00:30:54,160
Yeah, It is better

499
00:30:54,416 --> 00:30:57,488
Now, the problem is we

500
00:30:58,256 --> 00:31:04,400
still share the "train", but this one normally return the domain object, not a kind of JSON.

501
00:31:05,936 --> 00:31:07,984
We will see that a trend that have a physical of proxy

502
00:31:09,264 --> 00:31:15,408
to external web API will make into

503
00:31:15,664 --> 00:31:20,784
a adaptor, for in the portal adapter pattern that we will

504
00:31:21,296 --> 00:31:27,440
Have another of view before that, so don't worry if you are not aware of that, instead of returning

505
00:31:27,696 --> 00:31:30,512
a string of JSON let's make that

506
00:31:30,768 --> 00:31:32,560
method return as a train stones. Yeah

507
00:31:33,072 --> 00:31:39,216
So that we can get rid of JSON within the method

508
00:31:39,728 --> 00:31:44,592
To make it more domain and purely and not mixing technical staff with

509
00:31:44,848 --> 00:31:46,896
function domain stuff. Ok for you? Yes. Still Ok for you?

510
00:31:50,992 --> 00:31:53,040
So I discovered that the file

511
00:31:53,296 --> 00:31:55,344
There is a constructor of the train

512
00:31:55,600 --> 00:32:01,744
The train, ok, we see a lot of stuff to deserialize JSON

513
00:32:02,768 --> 00:32:05,328
This is the file actually

514
00:32:05,584 --> 00:32:09,936
This one is not choosed

515
00:32:16,080 --> 00:32:17,872
Delete, OK

516
00:32:19,152 --> 00:32:22,480
this one is never used too

517
00:32:24,016 --> 00:32:24,528
Let's delete it also

518
00:32:25,040 --> 00:32:25,808


519
00:32:26,064 --> 00:32:29,648
also this one is grey

520
00:32:31,952 --> 00:32:35,280
You can split into various files maybe.. Yeah, let's delete

521
00:32:37,584 --> 00:32:38,864
So here we are in the

522
00:32:39,888 --> 00:32:40,656
Train

523
00:32:40,912 --> 00:32:41,680
Class

524
00:32:42,192 --> 00:32:47,312
Yeah, and Train class does not have tons of behaviors I would say except

525
00:32:47,568 --> 00:32:49,872
by parsing a

526
00:32:50,128 --> 00:32:53,200
JSON

527
00:32:53,712 --> 00:32:55,248
My magic resharper

528
00:32:55,760 --> 00:32:56,272
Ok

529
00:32:57,296 --> 00:32:59,856
we use a lambda. OK. Yeah.

530
00:33:00,112 --> 00:33:06,256
I will move this one. There are the members of ... the properties and field of ... Ok.

531
00:33:06,512 --> 00:33:12,400
 Then all we have its a constructor. Only technical stuff.

532
00:33:13,680 --> 00:33:14,704


533
00:33:14,960 --> 00:33:15,984
What would you suggest

534
00:33:20,592 --> 00:33:21,616
If I drink

535
00:33:22,128 --> 00:33:23,152
[Audience Question]

536
00:33:30,320 --> 00:33:35,696
There is better location to do some JSON parsing

537
00:33:35,952 --> 00:33:38,512
but the train which is part of the domain and we should not do that here.

538
00:33:39,024 --> 00:33:45,168
Let's us do that. Yeah, Ok, so do that I have to create

539
00:33:46,960 --> 00:33:49,264
a little [method] to encapsulat the code I want to move.

540
00:33:49,776 --> 00:33:55,920
 This is something that we will do a lot. Extract and Move, Extract the method and move into the proper location.

541
00:33:56,176 --> 00:34:00,784
We do that a lot during the session. The first time we will do it. Ok.

542
00:34:01,040 --> 00:34:03,088
I take all the code I want

543
00:34:03,600 --> 00:34:04,624
To remove, To extract

544
00:34:05,392 --> 00:34:06,416
This one is ok?

545
00:34:06,928 --> 00:34:08,208


546
00:34:09,232 --> 00:34:10,256


547
00:34:10,512 --> 00:34:11,024


548
00:34:11,536 --> 00:34:13,328
One more, Ok. this one. Okey.

549
00:34:14,352 --> 00:34:17,168
The screen is very high.

550
00:34:20,496 --> 00:34:25,616
So we extract method from that, and it still will be instance method. Yeah.

551
00:34:25,872 --> 00:34:27,408
That

552
00:34:27,664 --> 00:34:28,688
Train topology

553
00:34:28,944 --> 00:34:31,248
Because while passing the JSON.

554
00:34:31,504 --> 00:34:32,016
The thing is

555
00:34:32,528 --> 00:34:35,344
Setting some value to the property of the train

556
00:34:36,112 --> 00:34:37,904
That's a nice method.

557
00:34:38,160 --> 00:34:38,672
 Here?

558
00:34:39,696 --> 00:34:42,256
So who is extracting into a new

559
00:34:42,768 --> 00:34:43,792
Method

560
00:34:44,304 --> 00:34:48,144
Probility to move it to continue to use this? Yeah.

561
00:34:48,656 --> 00:34:52,496
A good way to see if I have some dependency because that I want to move this one

562
00:34:53,008 --> 00:34:56,080
But I don't want to add dependency from this one

563
00:34:56,336 --> 00:34:58,128
I know I want to be insulate

564
00:34:58,384 --> 00:34:58,896
So

565
00:34:59,152 --> 00:35:00,176
I use static

566
00:35:02,992 --> 00:35:04,528
And I have some squeezers.

567
00:35:05,040 --> 00:35:05,552
Squeezes

568
00:35:05,808 --> 00:35:07,344
Here and here because this is static

569
00:35:07,856 --> 00:35:14,000
That's where we tried to change the second test also see if it's static, it make some error.

570
00:35:13,850 --> 00:35:28,790
Yeah so how can we cut these
Yeah relationship

571
00:35:28,790 --> 00:35:38,000
Actually we're trying .....

572
00:35:38,000 --> 00:35:43,460
[Audience Question]

573
00:35:43,460 --> 00:35:49,190
it is a good idea. There is something we can do also it's a so far the if the string is not
empty then I increment the

574
00:35:49,190 --> 00:35:54,619
the reserve seats instead of changing that
value of kinds of seats from that point

575
00:35:54,619 --> 00:35:59,359
we may be able to cut the behavior
within the property and every time

576
00:35:59,359 --> 00:36:04,640
call the property the property is doing
 the test so it may be one way of

577
00:36:04,640 --> 00:36:11,440
doing it so what do you think? let's try
that and as I set here instead of

578
00:36:11,440 --> 00:36:19,850
letting the method changing the value
 it will be something like 'seat' ..

579
00:36:19,850 --> 00:36:24,640
where... not where.. count

580
00:36:24,640 --> 00:36:31,150
not... Something like that..

581
00:36:31,150 --> 00:36:38,530
Richard so it's a kind of think you for
so much aware of Java streams it's a

582
00:36:38,530 --> 00:36:44,940
more functional way of dealing
with collection and with enumerables

583
00:36:44,940 --> 00:36:49,780
it's not so, here below is writing something like I take the

584
00:36:49,780 --> 00:36:54,910
list of the seats and I count every seat
where that lambda is meaning all seats where they don't have a booking at

585
00:36:57,790 --> 00:37:03,610
first. so okay I can I can
surprise this one
so now you can get rid of that

586
00:37:03,610 --> 00:37:11,140
it will be done at the other level
and this one maybe I can make as
you propose something similar associate

587
00:37:13,840 --> 00:37:18,970
to list of.
yeah, show some that
method into a function actually because

588
00:37:21,040 --> 00:37:32,280
it it may be a static function yeah so I
have a seat I change the signature, like a

589
00:37:32,280 --> 00:37:41,410
list of suits it
okay
and then here I change the local
variable, And now I return seat

590
00:37:47,880 --> 00:37:54,010
so we can extract that method into a
function so that where we call it we get the result directly

591
00:37:54,010 --> 00:38:00,250
so...  we adapt train
topology
this is a first step

592
00:38:00,250 --> 00:38:05,140
because we have to move it into the
proper location
why is it trend is...

593
00:38:05,140 --> 00:38:12,970
because it's because it's actually.. it's a matter of time

594
00:38:12,970 --> 00:38:19,570
okay, maybe so you
extract the method you make its static function

595
00:38:19,570 --> 00:38:27,070
so we can move it kind of
easily
let's put it....
if you get back to the method

596
00:38:27,070 --> 00:38:31,859
where it has been called
yes
 here we have a get train

597
00:38:37,150 --> 00:38:42,430
yeah
so it might be interesting
instead of having the JSON topology to
get the train
to return a train

598
00:38:44,500 --> 00:38:49,799
maybe we can put that static function into the train data service
yeah

599
00:38:49,799 --> 00:39:03,690
so let's move
so you move the method
into the train data service, okay?

600
00:39:04,270 --> 00:39:08,710
so far we still have a awkward
dependency in the train class but we change it in a second

601
00:39:08,710 --> 00:39:16,260
so you make it to a public
Yes, And

602
00:39:16,260 --> 00:39:22,089
the goal is to change this one
the get train
the get train
I will change the signature
so instead of returning a task of string

603
00:39:25,270 --> 00:39:30,339
yeah touches before it's I
think where of requesting a Web API so

604
00:39:30,339 --> 00:39:38,020
it's kind of actually on that complexity
but...
okay
but you have to read it
it's return a train

605
00:39:38,020 --> 00:39:42,880
yeah
to be better. for the business part

606
00:39:42,880 --> 00:39:49,630
I will to take the train...
okay
so you new train track from the topology

607
00:39:49,630 --> 00:39:57,970
but the train doesn't take the
topology we want to adapt the JSON so
we call it that adaption train topology

608
00:40:04,529 --> 00:40:12,789
but currently the train don't receive...
you have to change that
yeah

609
00:40:12,789 --> 00:40:17,079
I have to change that also
instead of that
let's accepting a list of seats
yes

610
00:40:17,079 --> 00:40:20,319
so to instantiate a train we will accept
the list of seats which will be much more easy to discussed yet, to play with

611
00:40:20,319 --> 00:40:25,750
yeah and remove this one

612
00:40:25,750 --> 00:40:30,609
so we don't have any kind of references from the train to any kind of train data service

613
00:40:30,609 --> 00:40:38,770
or a structure code you know
so that so
now I can take this one so 'gettrain'

614
00:40:38,770 --> 00:40:42,579
now is returning a train
so you don't need that anymore

615
00:40:42,579 --> 00:40:47,820
 I can remove this
and here we have some...
Okay yes much better

616
00:40:47,820 --> 00:40:49,620
we asked the train data service to get
a train and we get a train

617
00:40:51,240 --> 00:40:55,530
I compiled because maybe I have
break. yeah I read something

618
00:40:55,530 --> 00:41:00,420
something that buzz me is u nconscious even
if it does not compile it still green

619
00:41:00,420 --> 00:41:07,370
yeah it's a kind of bug I would say. It is a ...  Yes this is a ...

620
00:41:07,370 --> 00:41:11,970
within of test we did enough tests we
have made some ... to a train

621
00:41:11,970 --> 00:41:17,220
from a given JSON for given topology
and this is where we have to do the same

622
00:41:17,220 --> 00:41:24,210
we have to adjust the previous code that
we are expecting to ...

623
00:41:24,210 --> 00:41:32,370
signature to the new one
so, compile, it is ok.

624
00:41:32,370 --> 00:41:35,130
fine all right
it's okay it's okay and

625
00:41:35,130 --> 00:41:39,600
you come back to ...
let's get back to the ...
okay so thank you Bruno

626
00:41:39,600 --> 00:41:45,050
yeah
actually we move a topology code that

627
00:41:45,050 --> 00:41:50,030
were part of the train

628
00:41:50,030 --> 00:41:55,430
so I'm much better, much
more comfortable with that code but
there's still lots of things that bother me

629
00:41:57,290 --> 00:42:03,800
for instance let's see the train
 okay you clean the deck you improve the situation

630
00:42:03,800 --> 00:42:13,880
but ok, this is a train what is
it? it's a pure data class without any kind of behaviors without any
responsibly

631
00:42:13,880 --> 00:42:18,650
 and I'm not aware, maybe it's

632
00:42:18,650 --> 00:42:23,180
a follower that has said
once this kind of object is kind of
teenager object or child object you have to take responsibilities somehow

633
00:42:25,970 --> 00:42:33,650
and yet, so - let's let's do that

634
00:42:33,650 --> 00:42:39,710
 also we have a concept of seats yeah seat Wow
there is a name for that

635
00:42:39,710 --> 00:42:45,860
yeah actually there is a name for that
kind of domain you have an idea of what

636
00:42:45,860 --> 00:42:57,620
so we are lacking all the
concept of the domain within our code

637
00:42:59,360 --> 00:43:03,950
but when we have we have kind of data class yeah and all of yours in easy that original method

638
00:43:06,800 --> 00:43:12,470
kind of collections fit here very
positive are doing all the logic what I
suggest if you agree is to try to cap some behaviors

639
00:43:18,200 --> 00:43:22,010
and to put it in the
proper location and try to mass

640
00:43:22,010 --> 00:43:29,300
our child objects
yeah maybe you can
show something about our to check
yeah

641
00:43:29,300 --> 00:43:37,310
maybe we'll slide just since we will do it a lot let's see visually what we will do
we have a Class A Class B

642
00:43:40,970 --> 00:43:44,990
Class A is a web ticket manager has a method for
instance and the Class B is like say the

643
00:43:44,990 --> 00:43:50,300
train so what we will do a lot
it's to extract code to extract the

644
00:43:50,300 --> 00:43:54,200
behavior and to a method so then we will
have a method
into the same type and then we will move

645
00:43:56,870 --> 00:44:01,310
it into the proper location, the train
for instance and at the end of the day

646
00:44:01,310 --> 00:44:06,560
we will have more actually...
good balance

647
00:44:06,560 --> 00:44:14,030
yeah domain and stuff like that
okay
so let me switch back to the code

648
00:44:14,030 --> 00:44:22,970
 so I suggest that we will do that
okay each train reserved seats plus it's the
first business rule, a train should not

649
00:44:25,490 --> 00:44:30,370
exceed maximum capacity of the Train
 I suggest that we extract a method here

650
00:44:30,370 --> 00:44:41,600
but maybe..
if does not exceed overall train's capacity

651
00:44:41,600 --> 00:44:45,260
once you like that are you okay you know
there are you

652
00:44:45,260 --> 00:44:53,450
yeah capacity
sorry I will make us a
non-static method a public one to be
able to move it easily so here I extract

653
00:44:57,380 --> 00:45:07,580
that big if with that method
where should I move it according to...
the train

654
00:45:07,580 --> 00:45:13,730
yeah and there is a hint if I have said
f6 to move Resharper say okay you pass

655
00:45:13,730 --> 00:45:18,680
an argument a train instance of argument
so you can easily move that behavior to the tain

656
00:45:18,680 --> 00:45:23,780
okay do train I have the train
does not exceed overall train capacity

657
00:45:23,780 --> 00:45:33,950
if I want to request that number of seats
okay actually what we have here is available seats we are building a list of available seats

658
00:45:36,770 --> 00:45:43,280
 so let us call a
method with find available seats for

659
00:46:02,260 --> 00:46:06,569
actually
there is some concept that we may introduce here
what do think

660
00:46:08,790 --> 00:46:22,530
[Audience Question]

661
00:46:23,119 --> 00:46:28,440
yeah, at the end of the day we need to have seats in a given coach

662
00:46:28,440 --> 00:46:33,500
but before that the domain expert was
talking a lot about reservation attempts

663
00:46:33,500 --> 00:46:40,050
it's a really important concept for him
so I suggest that we instead of just dealing with available seats

664
00:46:40,050 --> 00:46:43,950
let's build something from that part

665
00:46:50,690 --> 00:46:57,480
before
we are improving the code, Rruno also have something to show you

666
00:46:57,480 --> 00:47:04,319
yeah maybe you some people know and

667
00:47:04,319 --> 00:47:10,589
depend it's a tool to check the
dependency but it exists JArchitect

668
00:47:10,589 --> 00:47:18,569
for Java or C++
basically an advanced tools yes it's analyzing your code and

669
00:47:18,569 --> 00:47:25,170
raising some warnings or error and we were
working with Macau in deep

670
00:47:25,170 --> 00:47:31,170
yeah and we asked him to introduce a way to check that code base, follow the

671
00:47:31,170 --> 00:47:35,010
ubiquitous language, it's a prototype

672
00:47:35,010 --> 00:47:41,069
is not a release and we try to imagine you you have a team you have a
legacy code and you know the vocabulary

673
00:47:45,060 --> 00:47:50,520
of the domain expert and create a rule
it's called your code should rely on

674
00:47:50,520 --> 00:47:56,700
your you ubiquit language and we see
we have some problem and as you can see

675
00:47:56,700 --> 00:48:03,240
we have the list of program
and the world not matching correctly

676
00:48:03,240 --> 00:48:10,530
the cap is there so we have to enter a
list of worlds that are part of our domain

677
00:48:10,530 --> 00:48:16,920
yeah like train etc .. currently we have defined

678
00:48:16,920 --> 00:48:23,430
this list for each domain you want and the tool we tried to check
that so it's still in alpha yeah

679
00:48:27,059 --> 00:48:32,729
but I think it would be interesting where to
make some audit of some
to have a kind of code smell about that

680
00:48:35,249 --> 00:48:43,949
okay okay
 so run it
what was the result?

681
00:48:43,949 --> 00:48:52,619
okay so let's get back to to the business
we have some list of

682
00:48:52,619 --> 00:48:58,079
available seats I suggest that we change the signature that

683
00:48:58,079 --> 00:49:02,699
we introducing the concept of reservation attempt
so here instead of returning a

684
00:49:02,699 --> 00:49:13,349
list of seats let's make it return a reservation attempt,
 typo here

685
00:49:13,349 --> 00:49:15,949
thank you

686
00:49:16,730 --> 00:49:24,170
okay yeah okay the type does not exist
so yes I'm aware of that maybe I will

687
00:49:24,170 --> 00:49:37,730
rename it also but here as you can see
sorry ..

688
00:49:37,730 --> 00:49:41,240
the reservation temp type does not
exist yet so let's create it I'll tend
to create a reservation attempt
okay?

689
00:49:43,670 --> 00:49:54,049
and here since the
function is expecting to return me that

690
00:49:54,049 --> 00:49:59,079
kind of reservation attempt all I have
to do is to install yet here at the end

691
00:49:59,079 --> 00:50:05,510
return a new reservation attempt
ok?
providing it the list of seats I just found

692
00:50:05,510 --> 00:50:11,270
all I have to do is to create the
constructor accepting a list of seats for that reservation attempt
 ok？

693
00:50:14,569 --> 00:50:23,690
And that's it
maybe I will need to to walk with the seats

694
00:50:23,690 --> 00:50:29,809
so let me start off creating a field[parameter] seats

695
00:50:29,809 --> 00:50:36,410
Maybe introduce a read property because I will

696
00:50:39,170 --> 00:50:44,869
need to work with the the seats of that reservation attempt
okay?

697
00:50:44,869 --> 00:50:49,819
so we just introduced a reservation attempt which has a property of seats
and that's it

698
00:50:49,819 --> 00:50:55,730
pretty much so that the findavailableseats now the name is maybe
build reservation temp

699
00:50:55,730 --> 00:51:02,990
would be better
yeah okay
so now the method is built reservation attempt
its find available

700
00:51:05,150 --> 00:51:08,450
seat within the Train and return a
reservation attemp with that
it's okay for everyone
said

701
00:51:12,410 --> 00:51:17,569
so the code is not compiling anymore because I used
to work with the list of seats so what I

702
00:51:17,569 --> 00:51:23,210
need is to rename available seat by
reservation attemp
first step and then to

703
00:51:23,210 --> 00:51:28,820
add the in direction to the seats and to
work with the

704
00:51:28,820 --> 00:51:33,320
the list of the seats
so just let me fill that

705
00:51:33,320 --> 00:51:46,040
three location
f12
oops
got seats

706
00:51:46,040 --> 00:51:51,260
should compile let me check
okay it's compiling is still green

707
00:51:51,260 --> 00:51:58,910
so here what I just did is to create a
concept that is directly come from the
domain a reservation attempt and replace

708
00:52:02,300 --> 00:52:07,520
a simple list of seat
okay ?
what can I do here reservation attempt

709
00:52:07,520 --> 00:52:14,000
here it's like saying the

710
00:52:14,000 --> 00:52:18,770
is reservation
attempt fulfilled, the domain expert

711
00:52:18,770 --> 00:52:24,560
talking a lot about that so let's create
a method for that
extract and move

712
00:52:24,560 --> 00:52:31,640
is fulfilled or not

713
00:52:31,640 --> 00:52:37,040
I think it's it's okay for that
so we asked the reservation attempt are you fullfilled

714
00:52:37,040 --> 00:52:44,510
so first extract still on that
class and then to move it to the up

715
00:52:44,510 --> 00:52:47,530
sorry

716
00:52:47,530 --> 00:52:51,590
I extract to behavior and I put it into
the proper location which is reservationAttempt

717
00:52:51,590 --> 00:52:56,630
let something bother me because you pass twice the seat request count

718
00:52:56,630 --> 00:53:01,400
yeah
you passed there and pass there
you actually can provide

719
00:53:01,400 --> 00:53:06,320
the seat requested count once when we construct the reservation attempt so

720
00:53:06,320 --> 00:53:10,250
that we don't need anymore to ask to provide it every time we want to to

721
00:53:10,250 --> 00:53:16,810
check if it's fulfill
let's do that
okay I agree
go to implementation

722
00:53:16,810 --> 00:53:21,110
seats requested counts I would provide it
into the constructor of the reservation

723
00:53:21,110 --> 00:53:31,000
attempt here okay sorry I thinking I did a huge mistake

724
00:53:32,100 --> 00:53:38,970
so okay so I changed the constructor of
the reservation attempt I'll tend to add

725
00:53:38,970 --> 00:53:44,520
parameter to the constructor
yes please sir do that
and seats requested count here

726
00:53:44,520 --> 00:53:49,290
what I can do is simply to keep a
read-only field meaning it's not public

727
00:53:49,290 --> 00:53:53,580
it won't be accessible by the outside
world

728
00:53:53,580 --> 00:53:59,610
now I had it what
I can do is to leverage on it instead

729
00:53:59,610 --> 00:54:06,080
of the one that is provided as argument in the each fulfill so here I replace it

730
00:54:06,080 --> 00:54:14,670
the parameter with the internal field
and now can get safety delete this

731
00:54:14,670 --> 00:54:22,140
parameter since I'm in C# I can
transform it into property expression body

732
00:54:22,140 --> 00:54:31,470
okay let's let's move that now I
think it's okay okay so here getting

733
00:54:31,470 --> 00:54:38,070
back to the each fullfield usage you
see I'm on a reserve method I asked

734
00:54:38,070 --> 00:54:43,620
to build a reservation attempt to the
Train
oh maybe
you don't move the BuildReservation on the train

735
00:54:44,070 --> 00:54:49,110
below that I move the build attempt method to the Train

736
00:54:49,110 --> 00:54:54,150
first so let's move
it into the Train so now I can ask the

737
00:54:54,150 --> 00:54:57,750
Train, please train build reservation attempt with that number of

738
00:54:57,750 --> 00:55:02,940
seats I want.
get a reservation attempt
and then if it's fulfilled then I can

739
00:55:02,940 --> 00:55:07,620
continue I can continue to ask the
booking reference and also booking ref

740
00:55:07,620 --> 00:55:13,800
is not part of the domain he said always
booking reference yeah so let's stick to

741
00:55:13,800 --> 00:55:20,580
the domain long edge in that case and
then what we do is to iterate on every
seats of the reservation attempt to

742
00:55:22,170 --> 00:55:28,320
assign the booking refs yeah maybe we
can extract a method here and put it

743
00:55:28,320 --> 00:55:34,010
into the reservation attempt directly
which will be assigned booking refs

744
00:55:34,010 --> 00:55:40,040
which one the

745
00:55:40,420 --> 00:55:44,839
the demo of exacting term
of the domain expert we assign a booking refs

746
00:55:44,839 --> 00:55:48,619
to revervation attempt
ok I extract

747
00:55:48,619 --> 00:55:54,200
the method what will be the next chain
stuff to do to move yeah move to the
reservation attempt
ok so we assign

748
00:55:57,619 --> 00:56:02,930
booking refs to the reservation
attempt
ok if we look at the
implementation for you to

749
00:56:05,210 --> 00:56:09,650
follow we take that bookingReference and
assign it to every one of the seats of

750
00:56:09,650 --> 00:56:21,020
the bookingRef
ok?
[Audience Question]
 I was thinking the same thing as you

751
00:56:21,020 --> 00:56:28,010
and the domain expert was really saying
the process is to build

752
00:56:28,010 --> 00:56:32,270
a reservation attempt and at the end of the day to transform it into a
reservation so yes but I was the same idea

753
00:56:35,670 --> 00:56:40,400
yeah absolutely

754
00:56:40,400 --> 00:56:47,450
good question
actually we thought it's
like a technical term build you used to
do it to use it in technical but for the

755
00:56:50,390 --> 00:56:55,730
domain expertise it was still a concept of this realm
so we have a train caching to save ...

756
00:56:55,730 --> 00:57:02,000
Wow well maybe it's time to morally
have a cache in this application within

757
00:57:02,000 --> 00:57:08,119
this application, yes you can cache everywhere let's see if it's still

758
00:57:08,119 --> 00:57:12,529
relevant here
ok?
we have a declaration
of the cache here on web ticket manager

759
00:57:12,529 --> 00:57:16,970
then we associate it into the
constructor of the web ticket manager

760
00:57:16,970 --> 00:57:23,930
then we clear it
interesting we clear it
and cause it change the color

761
00:57:23,930 --> 00:57:30,710
it illustrate me that oh it takes 3
second, average of 2 second

762
00:57:30,710 --> 00:57:37,099
to clear the cache I don't know what
it's there but ok I hope it was and then

763
00:57:37,099 --> 00:57:43,700
we save,
 yeah the bookingReference and
the train id, ok. into the cache
and then that's it

764
00:57:48,470 --> 00:57:55,880
so the cache where we only save stuff
but think about our
maybe it was a

765
00:57:55,880 --> 00:58:02,570
unfinished item,
 maybe that but even
now if we implement correctly it's a

766
00:58:02,570 --> 00:58:05,720
mistake
as we said before

767
00:58:07,849 --> 00:58:16,609
why we cache our topology,
it's a mistake
they can change it

768
00:58:19,250 --> 00:58:25,400
and so yes it's a it's kind of stupid
thing I would say let's get rid

769
00:58:25,400 --> 00:58:33,910
of that, I remove it here I
remove that remove that
I feel better now
[Audience Question]

770
00:58:47,720 --> 00:58:53,000
this is the kind of discussion we may have since it's not here we

771
00:58:53,000 --> 00:58:56,210
call it before because it's not the first time we run the session but

772
00:58:56,210 --> 00:59:01,250
yes I will be with that this is
something that we must discuss about the

773
00:59:01,250 --> 00:59:06,200
strategy without talking about technical details but saying that we can memorize

774
00:59:06,200 --> 00:59:18,170
stuff that we get at that time is it
correct according to you
[Audience Question]
so yeah so ok

775
00:59:18,170 --> 00:59:26,410
we get back to the method we get a train
from train data service

776
00:59:26,410 --> 00:59:31,880
then we have to judge train capacity

777
00:59:31,880 --> 00:59:36,290
if it's not the case we build a reservation attempt yeah then we check

778
00:59:36,290 --> 00:59:42,770
if it's fulfilled or not because we may
run out of seats I see the train is full

779
00:59:42,770 --> 00:59:50,000
for instance or reached the next to the
limit then we ask booking reference service then

780
00:59:50,000 --> 00:59:54,200
we assign the booking reference and
then we booked the seat and then we

781
00:59:54,200 --> 01:00:00,670
return the the result I don't know for
you but now the method is one screen high

782
01:00:00,670 --> 01:00:05,480
we are embracing a little bit more the
concept of the domain

783
01:00:06,531 --> 01:00:12,163
After the spreading the news goes into the popular location the Twin Towers Malaysia

784
01:00:12,419 --> 01:00:13,187
The

785
01:00:13,443 --> 01:00:14,979
The seats also

786
01:00:15,235 --> 01:00:17,539
The resolution attempt also

787
01:00:19,331 --> 01:00:22,659
Yes I return money

788
01:00:23,171 --> 01:00:26,755
No what would you suggest because it's important to be time boxed

789
01:00:27,011 --> 01:00:29,827
Haha because I mean you can improve god a lot

790
01:00:30,083 --> 01:00:31,619
What time we have an objective

791
01:00:32,131 --> 01:00:33,411


792
01:00:33,667 --> 01:00:37,507
How to fix a bug

793
01:00:37,763 --> 01:00:38,531
Concept

794
01:00:40,835 --> 01:00:42,115


795
01:00:43,651 --> 01:00:49,283
Yep absolutely, you're saying that you what we can  get rid of that synergies on here

796
01:00:49,795 --> 01:00:53,379
Any set to return

797
01:00:53,891 --> 01:00:55,171
And then return

798
01:00:55,427 --> 01:00:59,523
A task fixture is here, so that is purely domain

799
01:01:00,035 --> 01:01:05,155
No strangers on inside a simply recharging the oven in stock

800
01:01:05,411 --> 01:01:06,179
Will do that

801
01:01:06,439 --> 01:01:07,975
we will do that in a second

802
01:01:08,231 --> 01:01:12,839
but before that we would like to introduce the missing concept

803
01:01:13,351 --> 01:01:14,375
because

804
01:01:15,143 --> 01:01:16,679
when we enter BuildReservationAttempt here

805
01:01:18,727 --> 01:01:20,775
we build it from the

806
01:01:21,287 --> 01:01:25,383
train perspective and not from the coach perspective

807
01:01:25,639 --> 01:01:28,455
we use all seats with no notion of coach

808
01:01:28,967 --> 01:01:33,575
So how to introduce the concept of coach according to you what will be your strategy

809
01:01:53,799 --> 01:01:59,943
Basiclly the topology is taken from the name of every seats...every seats has the name including a1 a2 a3 b4...

810
01:02:00,199 --> 01:02:04,551
A is the name of the coach...is the name of coach

811
01:02:04,807 --> 01:02:06,599
it's an implict way to figure it out these seats belongs to the coach

812
01:02:11,719 --> 01:02:13,767
yeah absolutely..good idea

813
01:02:14,791 --> 01:02:17,351
but how to introduce it

814
01:02:17,607 --> 01:02:18,119
right now

815
01:02:18,631 --> 01:02:20,679
what will be your next move?

816
01:02:24,263 --> 01:02:29,127
yeah okay, but how to do that?

817
01:02:29,383 --> 01:02:30,919
start by what you suggested if you have a keyboard

818
01:02:38,343 --> 01:02:39,111
Yeah

819
01:02:41,415 --> 01:02:43,719
Why not? But we will start with the test...absolutely...

820
01:02:43,975 --> 01:02:47,303
from the train we will get ...

821
01:02:47,559 --> 01:02:50,119
we will check that the a train exposed coaches for instance

822
01:02:50,375 --> 01:02:52,935
for example

823
01:02:53,959 --> 01:02:56,519
Because we totally addict of

824
01:02:57,031 --> 01:02:57,799
TDD

825
01:02:58,567 --> 01:02:59,591
And

826
01:02:59,847 --> 01:03:01,383
we want to

827
01:03:01,639 --> 01:03:05,479
To create so let's add a TrainShould...fixture...

828
01:03:05,735 --> 01:03:08,807
But so far we don't...we only have some acceptance tests

829
01:03:09,575 --> 01:03:11,879
It's TrainTrain system should

830
01:03:12,135 --> 01:03:13,927
Do this do that do it so we have three tests

831
01:03:14,183 --> 01:03:19,047
And here ...it would be our first unit test I would say

832
01:03:20,071 --> 01:03:21,607
It's a train should

833
01:03:21,863 --> 01:03:24,935
And maybe...train...should expose coaches something like that?

834
01:03:26,471 --> 01:03:27,495
So we get a train

835
01:03:28,519 --> 01:03:30,823
so should TrainShould expose coaches?

836
01:03:38,503 --> 01:03:40,551
I remove this one because I don't...

837
01:03:44,135 --> 01:03:45,415
Should expose coaches

838
01:03:46,695 --> 01:03:47,207
should...expose...coaches

839
01:03:48,231 --> 01:03:48,743
so...yeah...

840
01:03:53,095 --> 01:03:59,239
it talked a lot about it yeah

841
01:03:59,495 --> 01:04:03,335
Actually here I had even in mind some new rules for the related to the coach even the first for us is to fix the bug

842
01:04:03,847 --> 01:04:04,359
But

843
01:04:04,871 --> 01:04:06,407
Because Monet

844
01:04:06,663 --> 01:04:12,807
But he has something in mind to consolidate and to a new business rules

845
01:04:13,063 --> 01:04:13,575
Such as

846
01:04:13,831 --> 01:04:14,855
We should not

847
01:04:15,367 --> 01:04:19,463
Feed a coach more than 40%

848
01:04:19,975 --> 01:04:20,487
for instance

849
01:04:20,743 --> 01:04:25,351
and stuff like so it would be the proper location to make it

850
01:04:36,871 --> 01:04:38,151
So Far we need it

851
01:04:38,407 --> 01:04:41,735
We need to play with the coach

852
01:04:41,991 --> 01:04:44,295
We need to ask...to ask it

853
01:04:44,551 --> 01:04:45,319
but yes

854
01:04:45,575 --> 01:04:51,719
If we want to keep it completely private implementation details for your capsulated

855
01:04:51,975 --> 01:04:52,487
we won't write that

856
01:04:52,999 --> 01:04:55,047
So just for

857
01:04:55,559 --> 01:04:57,607
some explanation because I use a

858
01:04:58,631 --> 01:05:00,423
A snake

859
01:05:00,679 --> 01:05:02,727
name because we

860
01:05:02,983 --> 01:05:09,127
We use it in the tests to mock some situations...this is a train topology generator

861
01:05:09,383 --> 01:05:15,527
It's what we have built this morning...it's a way to qualify the topology

862
01:05:15,783 --> 01:05:21,415
And it's good to use because I know in this topology

863
01:05:21,671 --> 01:05:23,719
I have two coach and

864
01:05:24,487 --> 01:05:25,767
we set seat for each coach so it's the reason why I use this one

865
01:05:26,023 --> 01:05:29,351
So you in your test associated a train

866
01:05:29,863 --> 01:05:32,423
Ok providing the Train

867
01:05:32,935 --> 01:05:35,239
The list of seats adapted from that train

868
01:05:36,263 --> 01:05:36,775
topology

869
01:05:37,031 --> 01:05:37,543
Ok

870
01:05:38,311 --> 01:05:39,335
So let's check

871
01:05:40,359 --> 01:05:42,151
that train.coaches

872
01:05:42,919 --> 01:05:43,687
Yeah I'm sorry

873
01:05:45,991 --> 01:05:46,503
And

874
01:05:47,015 --> 01:05:49,575
I hate coaches but it doesn't exist at this time

875
01:05:51,623 --> 01:05:52,903
We need to

876
01:05:54,695 --> 01:05:55,719
Has size of

877
01:05:56,231 --> 01:05:59,047
two...because we have two coaches from the train topology

878
01:06:01,863 --> 01:06:05,703
And you can also check that every coach has 10 seats maybe

879
01:06:07,495 --> 01:06:13,639
It is long because I think it to be like a dictionary for like....coaches["A"], coaches["B"]

880
01:06:15,431 --> 01:06:16,199
Coaches["A"]

881
01:06:16,967 --> 01:06:19,015
dot seats...dot seats

882
01:06:19,271 --> 01:06:21,319
Has size 10

883
01:06:21,575 --> 01:06:23,623
Because every coach...ya

884
01:06:23,879 --> 01:06:25,927
Ok just to

885
01:06:26,439 --> 01:06:31,047
Just to make it expose what we	have with in train topology...okay...

886
01:06:31,303 --> 01:06:33,607
So let's start to generate something

887
01:06:34,887 --> 01:06:35,399
Yeah...Ok

888
01:06:37,191 --> 01:06:38,983
So you said the dictionary

889
01:06:41,799 --> 01:06:42,567
First the Name

890
01:06:45,639 --> 01:06:46,407
Coach

891
01:06:47,687 --> 01:06:48,711
doesn't exist yet

892
01:06:48,967 --> 01:06:51,527
The same we will create

893
01:06:51,783 --> 01:06:52,295
type

894
01:06:52,551 --> 01:06:55,111
for Coach...Yeah I would create it...create type

895
01:06:57,415 --> 01:07:00,231
So here the train will have

896
01:07:00,743 --> 01:07:02,279
A list of coach

897
01:07:02,791 --> 01:07:04,071
And now I can

898
01:07:04,327 --> 01:07:06,119
start as a dictionary

899
01:07:08,679 --> 01:07:14,823
If we have more time we won't expose it as a dictionary also we expose that a read-only dictionary

900
01:07:15,079 --> 01:07:17,383
or even better a concept

901
01:07:18,407 --> 01:07:20,199
The dedicate type for that but

902
01:07:20,455 --> 01:07:24,295
Since we would like to show you a lot of other stuff we won't

903
01:07:25,063 --> 01:07:27,111
develop here but

904
01:07:27,367 --> 01:07:28,903
To loop on the seats

905
01:07:29,159 --> 01:07:32,487
So here we did the constructor the id would be

906
01:07:32,743 --> 01:07:37,863
ok I've got a list of seats we said that the name of coach was an implict

907
01:07:38,375 --> 01:07:41,191
information part of the name of every seats

908
01:07:41,959 --> 01:07:45,543
So for every seat we just have to check if there is a coach

909
01:07:45,799 --> 01:07:46,567
With that name

910
01:07:47,079 --> 01:07:49,639
Because seats has a property called coach name

911
01:07:50,151 --> 01:07:53,735
And if we don't have an entry in the dictionary yet from that

912
01:07:54,503 --> 01:07:55,783
Coach name let's

913
01:07:56,039 --> 01:07:56,551
add it

914
01:07:57,063 --> 01:07:57,831
to the dictionary

915
01:08:00,903 --> 01:08:01,415
[Audience]

916
01:08:05,511 --> 01:08:11,655
Yes we can use a link...yeah but from the beginning of algorithm I prefer to show without the link

917
01:08:13,447 --> 01:08:14,215
And

918
01:08:14,471 --> 01:08:20,359
You instantiate a new coach..and providing the name...seat.CoachName maybe

919
01:08:23,687 --> 01:08:24,199
So

920
01:08:24,711 --> 01:08:30,855
we iterate on every seats of the train for every one of them

921
01:08:31,111 --> 01:08:35,975
we added the relating coach into the dictionary on the fly

922
01:08:36,487 --> 01:08:37,767
Then we have to

923
01:08:38,023 --> 01:08:38,791
add the seats

924
01:08:41,863 --> 01:08:42,887
so...coach name

925
01:08:47,239 --> 01:08:50,823
First step. second step is to add the seat into the coach

926
01:08:54,407 --> 01:08:55,175
So...coaches...

927
01:08:55,687 --> 01:08:57,735
...coaches...array...seat

928
01:08:57,991 --> 01:08:58,759
seat.CoachName maybe

929
01:08:59,783 --> 01:09:00,807


930
01:09:01,063 --> 01:09:02,087
I introduced a variable

931
01:09:03,879 --> 01:09:05,159
we called it..newCoach? No?

932
01:09:08,743 --> 01:09:09,255
Yes

933
01:09:09,767 --> 01:09:10,791
Ok...why not

934
01:09:13,863 --> 01:09:14,631
newCoach

935
01:10:15,399 --> 01:10:15,911
addSeat...

936
01:09:18,983 --> 01:09:25,127
You are doing that for exposing some kind of fake version
so you want to make it work and then we can refactor something like that

937
01:09:26,151 --> 01:09:28,711
It is correct...ok..

938
01:09:34,087 --> 01:09:35,367
Now

939
01:09:36,647 --> 01:09:39,463
Ok. Ok

940
01:09:39,719 --> 01:09:41,511
actually you have to instantiate
Ok.I have to instantiate first

941
01:09:41,767 --> 01:09:47,911
the coache is here

942
01:09:48,167 --> 01:09:50,727
coach..and on that coach..you had the seats

943
01:09:51,239 --> 01:09:51,751
So...ok

944
01:09:54,311 --> 01:09:55,847
So I had to

945
01:09:56,871 --> 01:09:58,919
I suppose I have kind of list of seats

946
01:10:01,479 --> 01:10:01,991
So you are

947
01:10:02,503 --> 01:10:07,367
What Bruno is doing is to make

948
01:10:07,623 --> 01:10:08,391
The thing we will need to make a coach

949
01:10:09,671 --> 01:10:15,815
A nice place to to find our list of seats I would say

950
01:10:17,607 --> 01:10:18,119
But

951
01:10:18,375 --> 01:10:19,143
There is

952
01:10:19,399 --> 01:10:21,959
something that bother me a little bit in here. But

953
01:10:22,471 --> 01:10:23,239
I'll let you finish

954
01:10:23,495 --> 01:10:25,799
I've got to see green

955
01:10:27,591 --> 01:10:28,871
It's not green

956
01:10:33,991 --> 01:10:37,063
I see, they are green now

957
01:10:39,623 --> 01:10:42,439
oh, no, no..the compiler...I think is not compiling

958
01:10:43,463 --> 01:10:44,231
anymore, something like that

959
01:10:44,999 --> 01:10:51,143
Oh, yeah...you have to expose seats property
encapsulate...and

960
01:10:54,471 --> 01:10:55,239
seats

961
01:10:55,495 --> 01:10:56,775
here...should be green...yeah...it's

962
01:11:02,407 --> 01:11:04,711
ok....I don't really like that kind of

963
01:11:05,223 --> 01:11:05,735
We

964
01:11:06,247 --> 01:11:09,575
Add a seats to a coach...we change the coach

965
01:11:09,831 --> 01:11:10,855
Actually

966
01:11:11,111 --> 01:11:12,391
If we have more time

967
01:11:12,903 --> 01:11:14,439
There is something I would like to do

968
01:11:15,975 --> 01:11:19,303
It's even to make it everything immutable

969
01:11:20,327 --> 01:11:22,119
Because what we do is

970
01:11:22,375 --> 01:11:27,495
basically when you reserve...we want to reserve	some seats, we get train apology

971
01:11:27,751 --> 01:11:29,799
Which is something that we don't own

972
01:11:30,055 --> 01:11:31,591
It's coming from the outside world

973
01:11:32,103 --> 01:11:32,871
We work on it

974
01:11:34,151 --> 01:11:39,015
And I really don't want us to be tempted somehow to keep it in cache

975
01:11:39,783 --> 01:11:40,807
because it would be stupid

976
01:11:41,575 --> 01:11:47,719
And I would like to offer the fact that's when we get a train apology it should be immutable all I can do is to work with

977
01:11:48,743 --> 01:11:51,559
To find some information or to build reservation attempt

978
01:11:51,815 --> 01:11:54,119
But I don't want to allow my mates

979
01:11:54,375 --> 01:11:57,703
or new joiners in the team...it starts

980
01:11:57,959 --> 01:12:02,567
to...to...break that by introducing a cache and a state where

981
01:12:02,823 --> 01:12:03,591
I don't want

982
01:12:03,847 --> 01:12:04,359
to be

983
01:12:04,615 --> 01:12:10,759
So if we had more time what I would like to do is to make your everything immutable, the train will be immutable,the coaches will be

984
01:12:11,015 --> 01:12:12,551
immutable and the seats also

985
01:12:12,807 --> 01:12:14,599
the only

986
01:12:14,855 --> 01:12:17,671
things that will be mutable which will be the reservation attempt

987
01:12:18,951 --> 01:12:24,071
you see a reservation attempt which will be kind of entity
 that has a life cycle and

988
01:12:24,327 --> 01:12:27,911
but it can change all the time

989
01:12:28,167 --> 01:12:31,751
At the end I will transform the reservation attemp to reservation

990
01:12:32,007 --> 01:12:33,799
And the reseravation would be immutable

991
01:12:34,055 --> 01:12:36,871
the reservation to reservation....we it's

992
01:12:37,127 --> 01:12:38,663
yeah, you have a question?

993
01:12:46,599 --> 01:12:52,743
Sorry?yeah..Absolutely....is of reasoning also if we

994
01:12:52,999 --> 01:12:54,279
get back to the

995
01:12:54,535 --> 01:12:55,815
addseats

996
01:12:56,327 --> 01:13:00,935
What I would like is to maybe to
 for seats is to use what we call closure of operation

997
01:13:01,191 --> 01:13:02,727
its meaning the coach

998
01:13:02,983 --> 01:13:06,567
will have a method which is addSeats so I can add seats for the coache

999
01:13:06,823 --> 01:13:10,151
But instead of mutating me the coache instance

1000
01:13:10,407 --> 01:13:13,223
What we would like is to for that guy to return to me

1001
01:13:13,735 --> 01:13:15,015
The New Coach

1002
01:13:15,271 --> 01:13:16,551
a new instance of the coach

1003
01:13:16,807 --> 01:13:17,319
So

1004
01:13:17,575 --> 01:13:20,903
I called method...add seats on a coach instance

1005
01:13:21,415 --> 01:13:24,743
All it can do is to return your new instance

1006
01:13:24,999 --> 01:13:26,535
With that seats involved

1007
01:13:26,791 --> 01:13:32,679
But without changing the previous instance here when I call the addSeats

1008
01:13:32,935 --> 01:13:33,447
Listen

1009
01:13:33,959 --> 01:13:34,983
So

1010
01:13:35,239 --> 01:13:39,847
The benefits is to foster immutability for the closure of operation
and also to reduce coupling

1011
01:13:40,103 --> 01:13:43,175
It's easier to move code

1012
01:13:43,431 --> 01:13:44,711
Here the coach

1013
01:13:45,223 --> 01:13:46,503
stand by itself somehow

1014
01:13:46,759 --> 01:13:50,855
you know...method on the coach return me the new instance of coach

1015
01:13:51,367 --> 01:13:57,511
For if I want to move that it's more easy than if the coach where related to a new type which is releated to a new types and s...

1016
01:13:57,767 --> 01:13:59,047
stuff like that

1017
01:13:59,559 --> 01:14:01,095
Okay for everyone

1018
01:14:01,607 --> 01:14:02,375
Ok yeah

1019
01:14:17,223 --> 01:14:23,367
In any case it's important to discuss with domain expert

1020
01:14:23,623 --> 01:14:25,671
unfortunately we used to do that session with one domain expert

1021
01:14:25,927 --> 01:14:26,951
on stage with us

1022
01:14:27,207 --> 01:14:28,999
and we asked some questions since he's not here we note a lot of stuff

1023
01:14:29,255 --> 01:14:31,303
so there is a lot of implict you know in our head

1024
01:14:31,559 --> 01:14:35,143
But yes you're right you should have some kind of discussion

1025
01:14:35,399 --> 01:14:36,935
But

1026
01:14:37,703 --> 01:14:43,847
Here is much more an implementation detail I would say

1027
01:14:44,103 --> 01:14:46,919
It's to all folks the fact that I don't want to talk any kind of

1028
01:14:47,175 --> 01:14:50,503
states relating to something that I don't

1029
01:14:52,551 --> 01:14:53,319
I'm not

1030
01:14:53,575 --> 01:14:55,879
owner of the topology of the train I'm just a user

1031
01:14:56,135 --> 01:14:59,463
and every time a request is getting back to me

1032
01:14:59,975 --> 01:15:02,023
Get a snapshot...work on the snapshots

1033
01:15:02,535 --> 01:15:05,607
through my concept of domain and then make a reservation

1034
01:15:07,399 --> 01:15:07,911
Ok So

1035
01:15:21,223 --> 01:15:26,599
Yeah, absolutely

1036
01:15:27,623 --> 01:15:33,767
Ok I think maybe it's not a proper name..yeah...absolutely...okay
so instead of changing the coach here

1037
01:15:34,023 --> 01:15:36,327
let's return a new instance of coach

1038
01:15:36,583 --> 01:15:39,143
make it a closure of operation here

1039
01:15:40,679 --> 01:15:46,055
So adding the seats doesn't mutate the existing coach which will only return

1040
01:15:46,311 --> 01:15:47,079
a new coach instance

1041
01:15:49,895 --> 01:15:50,407
Coach

1042
01:15:50,663 --> 01:15:51,687
Ok

1043
01:15:51,943 --> 01:15:52,711
with seat name

1044
01:15:55,015 --> 01:15:55,783
with what?

1045
01:15:56,295 --> 01:15:57,063
With a list

1046
01:15:57,319 --> 01:15:57,831
a new list?

1047
01:15:59,879 --> 01:16:00,647
yeah

1048
01:16:00,903 --> 01:16:07,047
Acutally this session is based on the session of three hours we have made in paris with domain experts

1049
01:16:07,303 --> 01:16:11,399
from the stage on May 4th I guess

1050
01:16:11,655 --> 01:16:17,799
with event storming with tons of stuff so

1051
01:16:18,055 --> 01:16:21,383
we had to pick a fight for that short version of two hours
there are many things that we may improve or whatever

1052
01:16:23,431 --> 01:16:28,295
So we can unfold the fact that the coach seats and train are really value types

1053
01:16:28,551 --> 01:16:29,319
So we won't

1054
01:16:29,575 --> 01:16:33,927
go into that we will only make that coach immutable

1055
01:16:35,975 --> 01:16:36,743
Maybe

1056
01:16:38,023 --> 01:16:40,839
There's lots of things to improve...and respect the

1057
01:16:41,607 --> 01:16:42,887
producing a train

1058
01:16:45,447 --> 01:16:45,959
Yes

1059
01:16:46,727 --> 01:16:47,751
to avoid the

1060
01:16:48,775 --> 01:16:50,055
The big issue

1061
01:16:51,847 --> 01:16:54,663
to implement the same constructor as before ok

1062
01:16:55,431 --> 01:16:57,479
So now we have to fix

1063
01:16:57,991 --> 01:16:58,503
the code

1064
01:16:59,015 --> 01:16:59,527
Yeah absolutely

1065
01:17:07,463 --> 01:17:08,231
Because existing code

1066
01:17:08,487 --> 01:17:09,255
was doing that

1067
01:17:09,511 --> 01:17:10,791
so its...baby steps you know

1068
01:17:11,047 --> 01:17:15,911
you fix...this...code

1069
01:17:16,935 --> 01:17:21,543
So time to change it and to...so

1070
01:17:21,799 --> 01:17:23,335
So the idea would be to get the coach

1071
01:17:23,847 --> 01:17:24,615
To add seats

1072
01:17:25,895 --> 01:17:26,407
So

1073
01:17:26,663 --> 01:17:27,687
through it...new coach

1074
01:17:27,943 --> 01:17:30,759
Yeah, new coach and then to install the new coach

1075
01:17:31,271 --> 01:17:33,319
the variable into dictionary

1076
01:17:34,087 --> 01:17:37,415
So it's still red here?

1077
01:17:37,671 --> 01:17:41,767
But I guess that after saving that new coach value

1078
01:17:42,023 --> 01:17:44,327
Into the dictionary it will be green again

1079
01:17:45,351 --> 01:17:45,863
Fully?...new coach

1080
01:17:48,167 --> 01:17:48,679
That's right

1081
01:17:49,191 --> 01:17:50,471
[Audience]

1082
01:18:10,183 --> 01:18:10,951
Yeah...yeah

1083
01:18:18,375 --> 01:18:19,655
within the test?

1084
01:18:21,447 --> 01:18:23,751
in the coach...okay

1085
01:18:31,175 --> 01:18:31,687
here

1086
01:18:32,711 --> 01:18:34,759
you get back to the usage I guess

1087
01:18:43,719 --> 01:18:44,999
Oh yes yes...you're right

1088
01:18:45,255 --> 01:18:46,791
completely right

1089
01:18:52,679 --> 01:18:58,823
we will do that because we would like to show you the architecture and other stuff
but yes you're right...you're right

1090
01:19:03,431 --> 01:19:09,319
Yeah absolutely this was next point actually we have a train which has

1091
01:19:10,087 --> 01:19:11,623
exposed a list of seats and trying to expose the list of coach

1092
01:19:11,879 --> 01:19:15,975
And all the seats belong to the coaches so what we should do is

1093
01:19:16,231 --> 01:19:19,815
Instead of adding a duplicate collection on the train

1094
01:19:20,071 --> 01:19:21,863
instead to have a projection

1095
01:19:22,375 --> 01:19:24,679
And the list of seats for the train must be the

1096
01:19:24,935 --> 01:19:27,751
the projection of all the seats of every coach

1097
01:19:27,751 --> 01:19:28,007
of the train

1098
01:19:28,007 --> 01:19:29,031
so let's do that

1099
01:19:29,287 --> 01:19:32,359
select many something like that

1100
01:19:32,871 --> 01:19:34,151
coaches

1101
01:19:35,431 --> 01:19:36,455
let's take every coach

1102
01:19:36,967 --> 01:19:39,527
And return the...value

1103
01:19:40,039 --> 01:19:41,063
select many

1104
01:19:46,695 --> 01:19:47,463
for every seats
for every coach

1105
01:19:47,975 --> 01:19:49,767
I do c

1106
01:19:50,023 --> 01:19:50,791
split it

1107
01:19:51,047 --> 01:19:51,559
seats

1108
01:19:55,143 --> 01:19:56,167
toList

1109
01:19:56,679 --> 01:19:57,191
to a newList

1110
01:19:59,239 --> 01:20:02,823
with this kind of linq again but it's we make a projection

1111
01:20:03,079 --> 01:20:03,847
we take

1112
01:20:04,103 --> 01:20:05,895
All the seats on every coach

1113
01:20:06,407 --> 01:20:09,223
And we return it the list of seats for the entire train

1114
01:20:09,735 --> 01:20:13,319
So we have this one? we don't need to set it anymore because it will be

1115
01:20:13,575 --> 01:20:14,344
a get on me...property

1116
01:20:18,952 --> 01:20:19,464
Ok

1117
01:20:23,048 --> 01:20:25,352
We need we have the coach...compiled

1118
01:20:25,608 --> 01:20:27,144
Yeah it's good now

1119
01:20:28,936 --> 01:20:31,752
So maybe we can maybe we can fix the bug

1120
01:20:32,008 --> 01:20:32,776
What do you think

1121
01:20:34,312 --> 01:20:35,336
So...Ok

1122
01:20:36,872 --> 01:20:39,688
Absolutely...good idea...yes

1123
01:20:39,944 --> 01:20:43,016
idea is to move the findAvailableSeats or the buildReservationAttempt

1124
01:20:43,272 --> 01:20:44,296
to the coach level

1125
01:20:44,552 --> 01:20:46,600
Because if we asked to the train level

1126
01:20:47,368 --> 01:20:49,416
There is no way of

1127
01:20:49,672 --> 01:20:53,256
properly there is a way that kind of crappy

1128
01:20:53,512 --> 01:20:54,536
so let's delegate it

1129
01:20:54,792 --> 01:20:57,608
To the to The Coach so I'm removing

1130
01:20:57,864 --> 01:20:58,376
This one

1131
01:20:58,632 --> 01:21:01,704
So we only do this the test it will be red and red

1132
01:21:01,960 --> 01:21:03,240
green step

1133
01:21:05,032 --> 01:21:08,872
So come back to the WebTicket

1134
01:21:09,128 --> 01:21:12,456
and as you suggested

1135
01:21:13,480 --> 01:21:14,248
Maybe the

1136
01:21:14,760 --> 01:21:18,088
buildReservationAttempt is in charge to be verified

1137
01:21:19,368 --> 01:21:21,928
and to treat

1138
01:21:22,696 --> 01:21:23,464
Something new

1139
01:21:25,768 --> 01:21:29,864
Maybe we can change the algorithm

1140
01:21:30,376 --> 01:21:31,144
but except algorithm

1141
01:21:31,400 --> 01:21:33,192
based on the coach

1142
01:21:35,240 --> 01:21:36,776
Let's put that

1143
01:21:37,032 --> 01:21:39,336
logic of looking at seats

1144
01:21:39,592 --> 01:21:40,616
at coach level

1145
01:21:42,664 --> 01:21:43,688
So for every coach

1146
01:21:44,712 --> 01:21:49,832
So we really have you maybe the same thing build a reservation attempt
yeah...I would like to use this one

1147
01:21:51,368 --> 01:21:52,136
please coach

1148
01:21:52,648 --> 01:21:54,696
beat me build reservation attemp if you can

1149
01:21:55,464 --> 01:21:55,976
Ok

1150
01:21:59,304 --> 01:22:02,120
And returning a reservcation attempt

1151
01:22:02,376 --> 01:22:04,680
ReservcationAttempt

1152
01:22:05,192 --> 01:22:06,728
Is reservationAttempt

1153
01:22:07,240 --> 01:22:07,752
absolutely

1154
01:22:13,384 --> 01:22:14,920
And if...reservation attempt

1155
01:22:15,176 --> 01:22:16,200
IsFulfilled

1156
01:22:16,456 --> 01:22:16,968
Ok

1157
01:22:17,736 --> 01:22:19,528
Then return

1158
01:22:20,296 --> 01:22:22,088
reservationAttempt

1159
01:22:22,344 --> 01:22:26,952
If not, we continue to iterate it on the next coach asking the same thing once we have

1160
01:22:27,208 --> 01:22:28,488
at least one coach

1161
01:22:29,000 --> 01:22:32,072
providing us its fulfill another reservation attempt we are happy with that

1162
01:22:32,840 --> 01:22:33,352
So

1163
01:22:33,608 --> 01:22:37,192
This one is actually the code I would like to

1164
01:22:37,448 --> 01:22:39,496
implement
copy and paste

1165
01:22:40,520 --> 01:22:41,032
In this method

1166
01:22:43,080 --> 01:22:44,872
So let's create a method

1167
01:22:51,272 --> 01:22:52,808
Okay, and I don't really like copy and paste actually

1168
01:22:53,320 --> 01:22:56,136
but in that case it

1169
01:22:57,928 --> 01:22:59,208
So justified

1170
01:22:59,464 --> 01:23:05,608
it's green....so we just fix the bug by doing that...maybe you can a red green refactor

1171
01:23:08,936 --> 01:23:11,240
Something to refact buildReservationAttempt at the train level

1172
01:23:11,752 --> 01:23:14,568
we still...let some code

1173
01:23:14,824 --> 01:23:15,336
So

1174
01:23:15,848 --> 01:23:18,664
based on the  what's on seat

1175
01:23:19,176 --> 01:23:21,224
here we have some kind of

1176
01:23:21,480 --> 01:23:27,112
crappy code so let's replace it with a linq request

1177
01:23:28,648 --> 01:23:32,744
So take me please all seats where BookingRef is empty

1178
01:23:33,000 --> 01:23:35,560
is empty...is null or empty

1179
01:23:36,328 --> 01:23:42,472
if we create a method also yeah...yeah...and

1180
01:23:42,728 --> 01:23:47,336
take the number of seats request count

1181
01:23:47,592 --> 01:23:49,896
So here we are projecting a list of

1182
01:23:50,920 --> 01:23:51,432
Seats

1183
01:23:51,944 --> 01:23:57,576
That are available and then we have a list of seats and available seats and then we take

1184
01:23:58,088 --> 01:24:04,232
The first three four whatever number we asked...and I replace this one...it does

1185
01:24:04,488 --> 01:24:07,816
Exactly the same thing as the foreach loop we have seen here

1186
01:24:09,096 --> 01:24:11,656
To prove it you just have to

1187
01:24:12,424 --> 01:24:14,216
you have to...just to...get rid of all that..

1188
01:24:14,472 --> 01:24:18,824
I remove

1189
01:24:20,104 --> 01:24:20,616
Ok

1190
01:24:22,408 --> 01:24:24,200
Ok you removed

1191
01:24:25,736 --> 01:24:26,504
Here

1192
01:24:28,808 --> 01:24:29,576
Oops

1193
01:24:30,600 --> 01:24:31,112
my mistake

1194
01:24:31,368 --> 01:24:32,136
Now it's ok

1195
01:24:32,392 --> 01:24:38,536
So what we can do maybe extract a method maybe more domain loyalty

1196
01:24:38,792 --> 01:24:43,656
so here is quite difficult with

1197
01:24:46,984 --> 01:24:48,520
values

1198
01:24:52,616 --> 01:24:57,736
The extracted method should be

1199
01:24:58,248 --> 01:24:59,016
isAvailable

1200
01:25:00,040 --> 01:25:01,320
Since we are working on seats

1201
01:25:02,088 --> 01:25:03,880
so non-static public

1202
01:25:05,160 --> 01:25:05,928
And we will

1203
01:25:06,184 --> 01:25:10,280
extract method and then we will move it into the seat
at the seat level

1204
01:25:10,536 --> 01:25:11,048
So

1205
01:25:11,560 --> 01:25:12,328
Move it

1206
01:25:12,840 --> 01:25:17,192
So here now if you can zoom on the linq request

1207
01:25:17,704 --> 01:25:21,800
return on the seats and we take all the seats that are available

1208
01:25:22,312 --> 01:25:25,384
And we take the first number that we need it

1209
01:25:32,040 --> 01:25:36,648
We need that. We introduced that eariler for the each fulfilled

1210
01:25:37,928 --> 01:25:42,792
for another reservation attempt I should to be

1211
01:25:43,048 --> 01:25:45,352
to be able to say fulfilled obtain a good reservation it's design choice...yeah...

1212
01:25:46,376 --> 01:25:47,400
Ok

1213
01:25:47,656 --> 01:25:50,216
We are happy because we fix the bug

1214
01:25:50,472 --> 01:25:53,669
fix bug we can imporving a little bit in the code....yeah...

1
01:25:53,670 --> 01:26:04,620
yeah maybe we can have a tiny part
about aggregates yeah so just a tiny

2
01:26:04,620 --> 01:26:09,000
part about aggregates. Aggregates is a
collection of objects which is entity and value types

3
01:26:09,000 --> 01:26:16,220
treated as a conceptual whole. Can
you see some aggregates in here

4
01:26:18,460 --> 01:26:30,470
train? yeah. Is coach an aggregate? no.
why is that?[Audience]yeah some aggregates mayby immutable.

5
01:26:30,470 --> 01:26:34,490
Actually it's
no because aggregates need invariants,
need business rules need something to to

6
01:26:36,800 --> 01:26:42,560
to to
yeah to be enforced I would say. And here

7
01:26:42,560 --> 01:26:49,130
the only variants we have is train level.

8
01:26:49,130 --> 01:26:53,600
they must not exceed 70 percent of the
train tickets limited which is the business I

9
01:26:53,600 --> 01:27:01,130
own and the coach aggregates as to as
to to enforced when we discuss with the

10
01:27:01,130 --> 01:27:05,210
domain expert he told us that he
wanted to add some new rules related to the coach.

11
01:27:05,210 --> 01:27:11,000
so that coach must not be
fulfilled also at must not be exceed

12
01:27:11,000 --> 01:27:15,980
given capacity so in that case it will
turn into an aggregate voice maybe it's

13
01:27:15,980 --> 01:27:22,850
a kind of detail. But something
interesting. Train, coach and seat may

14
01:27:22,850 --> 01:27:28,760
all be value types here. as we discuss
earlier if we think about the way we

15
01:27:28,760 --> 01:27:33,850
interact with the external backend we
get a kind of snapshot valid from a

16
01:27:33,850 --> 01:27:40,280
moment of time and we will work on that
snapshot. so we don't want to keep it in
cache. We just want to work with all those

17
01:27:43,340 --> 01:27:49,880
aggregates. fine cells so to enforce that
we can make it all value types. actually

18
01:27:49,880 --> 01:27:53,090
in the long term Russian we that's what
we did

19
01:27:53,090 --> 01:28:03,080
so that means that some aggregates may
be completely value types also.[Audience] yeah the

20
01:28:03,080 --> 01:28:10,430
trend here it most of the case it's like
this message was to it was one

21
01:28:10,430 --> 01:28:15,340
case where we could have this exception [Audience]

22
01:28:27,380 --> 01:28:32,519
if we have a level-two Business School
to be enforced at the coach level it.

23
01:28:32,519 --> 01:28:37,289
Yeah, in the long version we do that. So so far we
improved somehow the web ticket manager

24
01:28:39,300 --> 01:28:45,179
and the before it was a free screen
high, full of legacy code with lots

25
01:28:45,179 --> 01:28:50,880
of legacy stuff yeah. I think we have
kind of improved a little bit it's one

26
01:28:50,880 --> 01:28:56,309
screen high. It's using the word of the
domain within the code what we call

27
01:28:56,309 --> 01:29:02,130
ubiquitous language. we extract some
behaviors and we put them into the proper

28
01:29:02,130 --> 01:29:07,769
locations, but there is still something
that botheres us. someone has told it

29
01:29:07,769 --> 01:29:15,959
before this is that we have some Json
 design into the domain method

30
01:29:15,959 --> 01:29:22,110
and we still have our Task of strings
which is also a jism. yeah what we would

31
01:29:22,110 --> 01:29:28,380
like to do here is to get rid of that
design, and stuff and to replace it by

32
01:29:28,380 --> 01:29:35,579
reserve. sorry, reservation. So
that the Reserve method will return a

33
01:29:35,579 --> 01:29:41,249
reservation. then on the infrastructure side
side and we will transform

34
01:29:41,249 --> 01:29:45,989
the Reservation into a json version,
if we have an adapter if we have

35
01:29:45,989 --> 01:29:50,340
something pluggable. okay so I
suggest I will talk a little bit about

36
01:29:50,340 --> 01:29:52,979
the second equation which slide. I'm
sorry

37
01:29:52,979 --> 01:30:00,179
I will work on the code you
don't see. but it will explain when we

38
01:30:00,179 --> 01:30:04,380
get back to the code and like an
architecture we explain what we have done.

39
01:30:04,380 --> 01:30:10,590
okay
so who is aware of what hexagonal architecture is?

40
01:30:10,590 --> 01:30:18,420
okay cool what hexagonal
architecture pattern is made

41
01:30:18,420 --> 01:30:24,090
by Alistair Cockburn.
I can't remember, the long time ago.

42
01:30:24,090 --> 01:30:28,940
and it has many benefits. it's a pattern
at the architectural level it's known as to

43
01:30:33,620 --> 01:30:40,370
embrace change it was the first idea of
Alistair was to plug and unplug external

44
01:30:40,370 --> 01:30:46,460
dependencies plug and unplug stuff he
was talking about whether system able to

45
01:30:46,460 --> 01:30:51,260
to be plugged with many different
standards as input and many different

46
01:30:51,260 --> 01:30:56,780
stutters as output to broadcast news to
broadcast to TV to radio to whatever.
so it was kind of to have

47
01:31:00,830 --> 01:31:07,220
of clean code inside and every changes
in terms of i/o or way to interact with

48
01:31:07,220 --> 01:31:12,290
the system to be a non-event to be
something like you plug a plug in and

49
01:31:12,290 --> 01:31:17,900
you can plug a plug in and that's it so
it's it's come with it was introduced by

50
01:31:17,900 --> 01:31:25,040
that idea in mind but when we think
about it, it may allow us that we want to

51
01:31:25,040 --> 01:31:30,320
first on the domain to make some code
more value, business value inside to

52
01:31:30,320 --> 01:31:36,310
protect our domain code from the
technical stuff. I don't know for you but

53
01:31:36,310 --> 01:31:40,790
during long time I thought it was not
even possible to properly split between

54
01:31:40,790 --> 01:31:46,070
domain logic and and technical. We
tried many times that we failed a lot and

55
01:31:46,070 --> 01:31:51,880
seems I discovered that pattern.
it's really a nice way to and for that

56
01:31:51,880 --> 01:31:56,330
and I also want to enforce testability because
since everything is a pluggable and

57
01:31:56,330 --> 01:32:02,150
We can stub, we can mock, we can
stub the input output of the

58
01:32:02,150 --> 01:32:07,730
systems, business logic inside and so for
today we will focus much more the how to

59
01:32:07,730 --> 01:32:12,350
protect our domain code. So how does it work?
It works

60
01:32:12,350 --> 01:32:16,460
considering the world in two different
area there is inside and there is

61
01:32:16,460 --> 01:32:21,440
outside
simple, right? No thousands of layers, no...

62
01:32:21,440 --> 01:32:27,410
simply two area, the inside is a domain
it's your domain code like

63
01:32:27,410 --> 01:32:30,680
method like the train, the
reservationAttempt, the stuff like that

64
01:32:30,680 --> 01:32:36,560
and the infrastructure code is at the
outside of your system. So this

65
01:32:36,560 --> 01:32:39,710
is where you will find your favorite
HTTP stack,

66
01:32:39,710 --> 01:32:43,520
your database drivers, your
message middleware, your favorite solution.

67
01:32:43,520 --> 01:32:47,110
or whatever. This is
infrastructure side, code. which I've got
and what we want is to first

68
01:32:50,390 --> 01:32:56,390
improve the domain code so we have
diversity she is some kind of putting

69
01:32:56,390 --> 01:33:03,080
some  barriers around your domain code and
defining some entry points to enter and

70
01:33:03,080 --> 01:33:08,810
to leave the the domain code. So you keep
the infrasturcture code at the other

71
01:33:08,810 --> 01:33:15,860
side. This is a nice capability actually
because I don't know for you but when
you start your career as a developer you

72
01:33:17,660 --> 01:33:21,260
need to improve your skills, you need to
discover new thing you need to do lot

73
01:33:21,260 --> 01:33:26,270
of mistakes you need to implement you
own framework in order to realize

74
01:33:26,270 --> 01:33:30,140
at one point that there are some silly
stuff like implementing your framework

75
01:33:30,140 --> 01:33:36,230
stuff like that. But before you focus on
the domain really, it's still important
for some new young developers to be able

76
01:33:38,750 --> 01:33:43,370
to play in a kind of playground. I'm
okay with that

77
01:33:43,370 --> 01:33:48,500
as much as it does not jeopardize the
business value and the project and in

78
01:33:48,500 --> 01:33:51,800
that case I'm happy with that because
there is a kind of location where you

79
01:33:51,800 --> 01:33:56,180
can play. It's a playground your infrastructure
code. You can try new technology new

80
01:33:56,180 --> 01:34:01,130
stuffs without jeopardizing
the domain code. So this is what I really

81
01:34:01,130 --> 01:34:05,719
like in that pattern. So how does
it work, because there are barriers

82
01:34:05,719 --> 01:34:09,560
but I need to enter and to leave the
building, I would say that, to leave the

83
01:34:09,560 --> 01:34:13,880
domain code. So to do so in terms of
dependencies, all dependencies are

84
01:34:13,880 --> 01:34:17,330
towards inside. believes the
infrastructure code is aware of

85
01:34:17,330 --> 01:34:22,489
reference of domain code, but of course the
domain code should not be aware to any

86
01:34:22,489 --> 01:34:29,110
framework. Even Jesus stuff. It seemed
like that so the domain is completely

87
01:34:29,110 --> 01:34:36,770
independent from any kind of technology
even Json string or thing like that. So

88
01:34:36,770 --> 01:34:42,800
to allow us to move from the
inside to the outside to ask new thing

89
01:34:42,800 --> 01:34:47,870
to talk with external web api and do
some stuff, we will rely on ports and

90
01:34:47,870 --> 01:34:53,180
adapters. And to do so we are actually
using

91
01:34:53,180 --> 01:34:58,160
inversion dependency principle, so that
from the inside we can go outside and do

92
01:34:58,160 --> 01:35:04,130
some stuff. Alistair Cockbrun recently
discussed with an another guy I can't

93
01:35:04,130 --> 01:35:07,910
remember the name and that was
suggesting the name of configurable

94
01:35:07,910 --> 01:35:12,920
dependencies. What Alistair was saying is
dependency injection principle I don't

95
01:35:12,920 --> 01:35:17,840
really like because this is like if
negative way of formulating things. It's

96
01:35:17,840 --> 01:35:23,900
you used to do that do the other way
around do the inverse so he was trying
to find a much more fluent intention way

97
01:35:27,080 --> 01:35:32,660
of saying that, so they lead to
configurable dependencies so you plug

98
01:35:32,660 --> 01:35:41,420
and unplug your dependencies around your main.
So if we get back to a case

99
01:35:41,420 --> 01:35:47,420
here we say we have ports and adapter
to enter and to leave the domain. So

100
01:35:47,420 --> 01:35:52,550
ports belongs to the domain and there
are some interfaces like lollipops here

101
01:35:52,550 --> 01:35:57,440
so here I've got the IReserveSeats which
is the entry point from the
tata system. so I had through an

102
01:36:00,770 --> 01:36:07,340
adapter HTTP adapter IP dot net callback
I must call an interface which is a port

103
01:36:07,340 --> 01:36:14,930
I have another seat, say please reserve
me something and I get a

104
01:36:14,930 --> 01:36:19,190
reservation and that adapter will do the
rotation between the reservation and the
Json version because the Json that so it

105
01:36:23,810 --> 01:36:29,840
will be the proper location to do so
when I need to form a business rule

106
01:36:29,840 --> 01:36:35,090
when I need some extra data some extra
thing if not provided by everything I

107
01:36:35,090 --> 01:36:41,270
need from the beginning there are many
ways to do that but if let say I need to

108
01:36:41,270 --> 01:36:47,390
ask one of the external
SSL dependency you know the three web

109
01:36:47,390 --> 01:36:52,160
api we call during the process, we need
to access, we need to add something to
the outside, so to do so we asked some

110
01:36:54,940 --> 01:37:00,680
ports also made from the inside there is
IBookSeats interface there is IProvideTrainTopology

111
01:37:00,680 --> 01:37:05,840
interface and there is
IGetBookingRef interface. these

112
01:37:05,840 --> 01:37:09,270
are domain interface
the port still

113
01:37:09,270 --> 01:37:14,010
belongs to the domain reason why the
lollipop is in blue

114
01:37:14,010 --> 01:37:17,970
but the adapter is what belongs to infrastructure

115
01:37:17,970 --> 01:37:22,170
so basically adapter is something that
maps between the infrastructure code to

116
01:37:22,170 --> 01:37:28,620
the domain one and vice-versa. Is that OK for
all of you? yeah? we'll see that in

117
01:37:28,620 --> 01:37:36,060
the code in a few minutes. so port and
adapter to go in and to go out. easy, right? okay

118
01:37:36,060 --> 01:37:40,650
but when we try to implement it the
first time there's tons of question that
arouse and there are many ways to

119
01:37:45,540 --> 01:37:50,880
do so. We'll show you one. we have to
initialize we have to init to initiate

120
01:37:50,880 --> 01:37:59,520
you are to build you
have to build the stuff so I like I've

121
01:37:59,520 --> 01:38:02,670
got a metaphor which is a key ring
metaphor to explain that to my

122
01:38:02,670 --> 01:38:07,710
mate I try to explain to you. First step,
its we will talk here about the

123
01:38:07,710 --> 01:38:11,700
composition of utopian application, you
know, the place on your application

124
01:38:11,700 --> 01:38:17,070
where you build all your dependencies
and then voila apply the system is able

125
01:38:17,070 --> 01:38:22,320
to work and to do is work okay so we're
talking about the bootstrap of your

126
01:38:22,320 --> 01:38:27,000
application here so three steps first
step is to instantiate I need to go out

127
01:38:27,000 --> 01:38:32,760
adapters. All the adapters go to ask
to the SSL back-end "please give me a

128
01:38:32,760 --> 01:38:36,360
topology please
so here represented twp Train Data Service Adapter
and Booking Reference Service Adapter

129
01:38:38,340 --> 01:38:44,460
adapter these are like keys to go
outside and to ask stuff, so the first step

130
01:38:44,460 --> 01:38:49,980
is access those keys. Then second step
is I've got those keys, I wrapped them
with

131
01:38:52,200 --> 01:38:57,330
hexagon, with the domain. the hexagon is
where the domain stay so it's a web ticket manager.

132
01:38:57,330 --> 01:39:01,440
So the web ticket manager
will receive within its console ports

133
01:39:01,440 --> 01:39:09,930
interface to interact with the
outside world and then we instantiate we

134
01:39:09,930 --> 01:39:14,400
wrapped the hexagon with a new
adapter which will be the adapter to be
used in order to

135
01:39:17,250 --> 01:39:22,890
interact with our system so it's "I need to enter" adapters
that it's the way to

136
01:39:22,890 --> 01:39:27,660
communicate with our application, but
once we do that all we have to keep in
our hand from an application perspective

137
01:39:29,570 --> 01:39:35,070
from the asp.net Web API perspective all
I have to keep in my hand will be the entrypoint adapter

138
01:39:35,070 --> 01:39:39,540
so all the rest of the hexagon

139
01:39:39,540 --> 01:39:46,590
and adapters it's an implementation
details once I've built the place all I

140
01:39:46,590 --> 01:39:51,660
have to keep from our Web API
perspective is that adapter which is the

141
01:39:51,660 --> 01:39:58,110
entry point from a formal system. okay? to
put it differently those three steps

142
01:39:58,110 --> 01:40:04,199
looking at them in the diagram. First we instantiate
the adapter we need to go out, so

143
01:40:04,199 --> 01:40:07,980
the three back ends then we wrap
them with hexagon

144
01:40:07,980 --> 01:40:13,440
whereas domain logic stands and then we
wrap that domain logic it's like Russian

145
01:40:13,440 --> 01:40:18,000
doll you know I need to go out the hexagon I need to go in and at the end of

146
01:40:18,000 --> 01:40:21,660
the day all you keep in your hands - I
need to go in. This is the only thing

147
01:40:21,660 --> 01:40:26,270
that you need to interact with
system from application perspective

148
01:40:26,270 --> 01:40:30,960
so all you keep in your line will be
only that adapter that you will inject

149
01:40:30,960 --> 01:40:38,489
into your callback I speed up the
corners and stuff like that. okay? sure
you have some question we will call it

150
01:40:41,400 --> 01:40:51,440
or hope you will have some questions. so
just to have a look on the new version

151
01:40:51,440 --> 01:41:00,080
you can notice now we have a reservation
and the modification has been to call a

152
01:41:00,080 --> 01:41:09,410
confirm because after this line I know
there is no exception and I can return

153
01:41:09,410 --> 01:41:16,230
the reservation. so the did, the
modification of the test is there, yeah, we

154
01:41:16,230 --> 01:41:23,429
returned a reservation and I already
create a beginning of adapter, the output

155
01:41:23,429 --> 01:41:31,380
adapter with AdaptReservation.
 This function will be called by Thomas in

156
01:41:31,380 --> 01:41:35,199
a few minutes, so you start to move
the technical json implementation to the
proper place. exactly. okay. what I suggest

157
01:41:38,469 --> 01:41:44,499
is to for me to to reduce in that first
acceptance test what I will have to do

158
01:41:44,499 --> 01:41:53,229
into my bootstrap my composition route
okay, so first one is to step one is to

159
01:41:53,229 --> 01:41:58,539
instantiate "I want to go out" adapter. so
here trainDataService for instance we
can even rename it to trainDataServicesAdapter.

160
01:42:00,820 --> 01:42:05,949
it's a bad name, it's still the
service. that's obviously I was there

161
01:42:05,949 --> 01:42:14,439
it's a proxy too. and same thing for
that bookingReferenceServiceAdapter. okay, step one I instantiate

162
01:42:14,439 --> 01:42:17,349
the dependencies I need to go to the
outside world

163
01:42:17,349 --> 01:42:24,489
yeah? all right, then what I need is to
instantiate the hexagon. actually so the
exact on here is a web ticket manager. so

164
01:42:27,189 --> 01:42:35,260
let's call it hexagon only here for
pedagogical school perspective over your

165
01:42:35,260 --> 01:42:41,039
life you don't you will call it with a
business name so please don't tell Eric
that we did that but just it's to focus

166
01:42:45,280 --> 01:42:48,999
on the hexagon and infrastructure here.
it's better for me to rename it hexagon

167
01:42:48,999 --> 01:42:53,349
here and then instead of
calling directly the hexagon

168
01:42:53,349 --> 01:42:58,719
all I have said before is the
application we would have to interact

169
01:42:58,719 --> 01:43:01,599
with my business logic through an
adapter yeah

170
01:43:01,599 --> 01:43:06,939
so let's introduce it. yeah, step 3
instantiate "I want to go in" adaptor, so

171
01:43:06,939 --> 01:43:13,269
here but I can do is to how can we
generation oh yeah you already

172
01:43:13,269 --> 01:43:20,409
came same name, so I will
instantiate it providing what should I
provide. okay I think I got a sense like

173
01:43:25,059 --> 01:43:30,159
Russian dolls so those two first we are
providing to the hexagon here and the
hexagon is provided to the

174
01:43:32,829 --> 01:43:39,189
guy. okay so I create a constructor
because so far you just had made a

175
01:43:39,189 --> 01:43:44,709
static functions. okay maybe you have to
make that abstraction
not to inject what ticket manager yes

176
01:43:48,969 --> 01:43:53,590
actually yes you're right, we talked
about personnel at the ports are like

177
01:43:53,590 --> 01:44:00,429
interfaces so what I can do maybe is on
the web ticket manager here it's

178
01:44:00,429 --> 01:44:06,670
introducing its we changed after so
let's create an interface for that and

179
01:44:06,670 --> 01:44:20,170
let's say I reserve seats, something like that? em...
Sorry, I used to work on the Mac,

180
01:44:20,170 --> 01:44:25,300
so we try to pick a keyboard
IReserveSeats

181
01:44:25,300 --> 01:44:33,039
you work every day on the PC
yes, but not the same keyboard  I tried to find

182
01:44:33,039 --> 01:44:44,729
exeucise, stress yeah so I asked I add
the reserve method on that interface.

183
01:44:44,729 --> 01:44:49,929
here this is a port this is a port in
order to enter the hexagon

184
01:44:49,929 --> 01:44:56,559
so getting back to the code here
what I will provide to the external

185
01:44:56,559 --> 01:45:04,150
adapter it will be the hexagon but as
oops, go to implementation as charlie
reserved seats yeah IReserveSeat.

186
01:45:07,860 --> 01:45:16,150
okay let me keep it into a private field
here I will need it. so I start set a

187
01:45:16,150 --> 01:45:22,689
reservation adapter okay so third step to
associate other nationality let's

188
01:45:22,689 --> 01:45:29,469
introduce a variable for that with our
instance okay my idea will be to replace

189
01:45:29,469 --> 01:45:34,959
the direct call to the hexagon by
something going through the adapter you

190
01:45:34,959 --> 01:45:40,539
know. so just to make it compile I will
go to the controller to web controller

191
01:45:40,539 --> 01:45:46,479
which is the place where I will use that
exact same adapter so in that controller

192
01:45:46,479 --> 01:45:53,079
here I will need to my entry point will
be together reservation request dto so I
will get a reservation request dto

193
01:45:54,909 --> 01:45:59,710
give it to the adapter and the adapter
will get back to me with a Json

194
01:45:59,710 --> 01:46:06,590
relating to the reservation okay? so to
do so I think the reservation dto is not

195
01:46:06,590 --> 01:46:11,420
in the proper place. I won't be able to
access it from the from the test. So

196
01:46:11,420 --> 01:46:16,580
I suggest that we move that and maybe it
will be no envision is quite painful to

197
01:46:16,580 --> 01:46:21,830
create project it's long so I will just
create a directory here. I will create

198
01:46:21,830 --> 01:46:25,850
Train Train domain all right and
infra

199
01:46:25,850 --> 01:46:33,620
so that we can start to split infra
(infrastructure) and so that we
can we are able to speak properly every

200
01:46:36,590 --> 01:46:43,190
type into the proper location. I'd moved
typed into matching files for be sure
that every file match to type so

201
01:46:45,860 --> 01:46:53,090
BookingReferenceService where should I put
domain or infra

202
01:46:53,090 --> 01:47:02,200
service. it's a bad name, the
name will be different but yeah coach

203
01:47:02,200 --> 01:47:11,600
domain yeah IBookingReferenceService
yeah it's an interface so it's a port

204
01:47:11,600 --> 01:47:20,570
yeah actually here so domain yeah. IReservedSeats?
port, so the domain, yeah

205
01:47:21,950 --> 01:47:29,090
ITrainDataservice, its names but
it's a domain is it okay its interface

206
01:47:29,090 --> 01:47:35,860
yeah reservation domain, right?
reserved I shall attempt same
reservation hotel for you , same

207
01:47:39,640 --> 01:47:43,820
reservationFailure also it's a
domain.
actually it's much more something to

208
01:47:45,290 --> 01:47:49,340
implement the biggest law where there is
no added value more than twelve toppling

209
01:47:49,340 --> 01:47:55,430
seats? domain. I'm kind of happy
because you have more domains than the

210
01:47:55,430 --> 01:48:02,740
infrastructur which is not the case in
all my projects so far so SeatJsonPoco

211
01:48:03,370 --> 01:48:10,280
SeatsReservationAdapter? infrastructure, yeah

212
01:48:10,280 --> 01:48:15,060
ThreadsholdTrainCapacity? domain, absolutely even if we

213
01:48:15,060 --> 01:48:24,030
came in through the name. Train? is it
domain and what do we have? TimeDataSservice,
 of course which is another time

214
01:48:28,620 --> 01:48:36,450
and WebTicketManager, domain. it's
all exactly but so far it's seen as some

215
01:48:36,450 --> 01:48:45,480
to HTTP rationale that we get rid no
it's okay so let's put it to the... let's

216
01:48:45,480 --> 01:48:48,230
keep it in the middle

217
01:48:49,370 --> 01:48:54,390
let's keep it into the middle before we
completely clean the house and put it in

218
01:48:54,390 --> 01:48:57,930
adjust the namespace
sorry I just enhancement yeah I would

219
01:48:57,930 --> 01:49:03,060
adjust the namespace here for the project.
 so that everyone would be at

220
01:49:03,060 --> 01:49:16,080
the proper location okay. so what I was
saying is I will from the should TrainTrainShould
getting back to the test

221
01:49:19,080 --> 01:49:22,620
okay
I said that I would like to introduce a

222
01:49:22,620 --> 01:49:28,680
way to interact with the ReservationAdapter,
 so let's say it's a Post dto.

223
01:49:28,680 --> 01:49:34,440
there is a better name to
find but new reservation request
diffuses I don't know if you you move it

224
01:49:36,630 --> 01:49:43,530
I don't know I didn't move thanks below
so ReservationRequestDto I

225
01:49:43,530 --> 01:49:54,390
have to move is it's on the bad project.
move to folder... TrainTrain infra

226
01:49:54,390 --> 01:50:00,360
so now I will be able to reference it
from the test, otherwise it will be part
of the Web API which has no reference so

227
01:50:03,630 --> 01:50:10,290
far okay. so we here I will instantiate a
new reservation request dto. This is ASP.net

228
01:50:10,290 --> 01:50:16,290
which used to instantiate
that for me but our number_of_seats here

229
01:50:16,290 --> 01:50:23,530
will be seatsRequestedCount and
the other train_id

230
01:50:23,530 --> 01:50:29,890
setting the
equivalent of the Json we receive as

231
01:50:29,890 --> 01:50:33,520
the input
it's a poco for it will be

232
01:50:33,520 --> 01:50:42,570
TraineId. here is my train
yeah okay so here I post a new
request dto, maybe this thing's, let's

233
01:50:46,900 --> 01:50:56,020
make it a variable, to make it clean so I've
got a reservationRequestDto and then I

234
01:50:56,020 --> 01:51:01,240
pass the reservation request to the adapter yeah,
 I want to go into adapter. create method okay create the

235
01:51:03,550 --> 01:51:11,200
method and instead of returning void I
will return maybe a string which will be

236
01:51:11,200 --> 01:51:17,710
the Json. Here I can
return something much more like asp.net

237
01:51:17,710 --> 01:51:21,940
internal structure to make a
response but I won't go into that here

238
01:51:21,940 --> 01:51:29,640
but as I rationalize it you okay
so here I am in the posts method yeah

239
01:51:29,640 --> 01:51:36,390
that should return me a jsonReservation.
 something like that

240
01:51:36,390 --> 01:51:40,390
why not
yeah so the adapter will return me that

241
01:51:40,390 --> 01:51:46,260
and I will assert on that yeah so
instead of all that

242
01:51:46,410 --> 01:51:51,940
jsonReservation should be equal to
that Json. that objective to target you

243
01:51:51,940 --> 01:51:56,740
know that yeah so it's still right
because I didn't plug the adapter. so

244
01:51:56,740 --> 01:52:03,160
adapter has three steps to
instantiate the entire hexagon structure

245
01:52:03,160 --> 01:52:09,480
but when I mean every method of the
adapter has three steps basically its

246
01:52:09,480 --> 01:52:13,440
first step is to adapt from their infrastructure
to the domain

247
01:52:13,440 --> 01:52:18,190
second step is to call the business
logic and then the third step is to

248
01:52:18,190 --> 01:52:23,800
adapt from domain answer to the
infrastructure and to return it. yeah you

249
01:52:23,800 --> 01:52:29,860
know what is it about in every method of
adapter so let's make it here, in that
case I don't have to adapt

250
01:52:31,540 --> 01:52:34,679
here so I will just introduce a new
variable

251
01:52:34,679 --> 01:52:40,800
for the number_of_seats and with a
machine liquid in the real life

252
01:52:40,800 --> 01:52:47,640
maybe you you have to serialize yourself
and we simulate this tech because asp.net

253
01:52:47,640 --> 01:52:53,040
do that for us but sometimes
you have to translate the Json in

254
01:52:53,040 --> 01:52:59,820
local variable for a domain object. so here
what I just did is to get some variables

255
01:52:59,820 --> 01:53:04,500
but this is where you will have to
translate transform adjust whatever it

256
01:53:04,500 --> 01:53:10,110
takes to be able to call the
domain logic. yeah Good. so now I call the

257
01:53:10,110 --> 01:53:16,679
hexagon so hexagon.Reserve, it's
a business domain method and I put it

258
01:53:16,679 --> 01:53:23,640
to put it local variable I get and numberOfSeats
number of let me call me

259
01:53:23,640 --> 01:53:36,900
requested okay I called the hexagon,
its return me reservation, since it is a method a
yeah

260
01:53:37,830 --> 01:53:43,710
so has a ration but since it's an async
method I will have to await that and

261
01:53:43,710 --> 01:53:49,500
truth sorry some like that c# to
obtain the sequence call. but since your

262
01:53:49,500 --> 01:53:54,840
method is I think because it's called
also async method I asked you to do so

263
01:53:54,840 --> 01:54:01,020
and then adapt from domain to this is a
method Bruno already done we had adapter

264
01:54:01,020 --> 01:54:05,300
adapter damage sure I provide a
reservation and I get some string and

265
01:54:05,300 --> 01:54:12,090
yeah I guess, to return. you see I get a
reservation from the business logic and

266
01:54:12,090 --> 01:54:22,230
then what I do is to adapt back from
the domain to the json infrastructure. this
is still red what did I miss

267
01:54:26,610 --> 01:54:29,689
[Music]

268
01:54:32,430 --> 01:54:44,650
you have to await also because
of a weight this is Mexican Russian okay
it's green sorry it was async/await

269
01:54:47,020 --> 01:54:52,780
issue. that's time to implement in SSP
net. so here as you can see within one
acceptance test we have done what we

270
01:54:54,460 --> 01:54:59,530
have to do is in composition note of the
application I don't know what you want

271
01:54:59,530 --> 01:55:08,650
to do, well, we have less than 10 minutes
I think what that parts should be the one

272
01:55:08,650 --> 01:55:13,000
that we will put into the setup of the
application so I can do that plug into

273
01:55:13,000 --> 01:55:18,370
the webosphere but maybe it's better to
keep some time for questions or for kind

274
01:55:18,370 --> 01:55:21,969
of wrap up, what do you think? okay
yeah otherwise I think I will have to

275
01:55:21,969 --> 01:55:35,320
run because we kind of little bit late
yeah so wrap up, we started from

276
01:55:35,320 --> 01:55:42,130
situation like this we have a web ticket
manager with a very procedural code do

277
01:55:42,130 --> 01:55:48,450
this and after we lead to some more

278
01:55:48,450 --> 01:55:56,370
consistent and more, I don't know what to
say, short working code also

279
01:55:56,370 --> 01:56:02,800
after Reserve method was kind of something
like this. thing is yes pretty much what

280
01:56:02,800 --> 01:56:09,489
we achieved what's important is that we
embrace the language of our domain
within our code plus legacy code very

281
01:56:12,430 --> 01:56:17,469
crappy and when we if we had time to
executor and append

282
01:56:17,469 --> 01:56:25,050
we will have less warnings we just you
know in second just just in front yeah

283
01:56:25,050 --> 01:56:30,160
so we are talking
about reservations, trains reception

284
01:56:30,160 --> 01:56:35,710
at term present which is fulfilled you
see so much, even if our domain experts

285
01:56:35,710 --> 01:56:42,469
is not able to read our code we can read
in front of him and

286
01:56:42,469 --> 01:56:49,070
being, yeah, being able to have a
discussion and he's being able to say no

287
01:56:49,070 --> 01:56:54,340
no this is not what I want for that
system. so there is less

288
01:56:54,340 --> 01:57:00,199
friction there is less gaps between what
we implemented what we was talking about.
so it's better if you want to follow him

289
01:57:04,360 --> 01:57:11,810
yeah we had some called ndependent show it in
a few seconds, but just before that

290
01:57:11,810 --> 01:57:19,310
yeah that's because it takes time to
switch as a final wrap-up we did not

291
01:57:19,310 --> 01:57:23,810
have to time to to make you feel that
because automate expertise in Paris and

292
01:57:23,810 --> 01:57:29,120
our first version was with him on stage
but it's crucial to talk to your domain
experts yeah most of the project has

293
01:57:31,429 --> 01:57:36,710
issue because the developers are not even
allowed to talk to domain experts.

294
01:57:36,710 --> 01:57:41,239
so for me so no it's a no-go I finish I
decide not to go to the project if it's
like this, but it wasn't the case at the

295
01:57:43,370 --> 01:57:50,300
beginning of my career so takes yes it
takes courage time determination to

296
01:57:50,300 --> 01:57:58,120
enforce that. but it's crucial otherwise
yeah not as if they don't buy the legacy

297
01:57:58,120 --> 01:58:04,610
because I'm a coach and I learn how to
refactor the code generate people when

298
01:58:04,610 --> 01:58:09,560
there is dependencies said my code is
not testable actually we can test any

299
01:58:09,560 --> 01:58:16,820
code any code so don't be daunted by it
I guess you may have some gut to do so yeah it
cost I but it's doable yeah and also

300
01:58:21,530 --> 01:58:27,080
it's we don't use a lot of techniques
here we basically use two basic

301
01:58:27,080 --> 01:58:30,260
techniques from the refactoring book of
Martin Fowler

302
01:58:30,260 --> 01:58:35,780
it's extract and move methods so it's
pretty much simple as soon as you have a
test Alice which is the first steps you

303
01:58:38,199 --> 01:58:44,739
can extract and move very very easily
the more complicated is to find some

304
01:58:44,739 --> 01:58:53,640
proper semantics and to and to invest in
your domain design they we have great

305
01:58:53,640 --> 01:58:57,930
in track of improvement as you just said
by some of you. yes this is something

306
01:58:57,930 --> 01:59:05,730
that is a living and ensuring you have
yeah you have been very interactive user
so thank you very much

307
01:59:07,190 --> 01:59:12,340
[Applause]
