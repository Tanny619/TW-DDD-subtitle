1
00:00:00,256 --> 00:00:06,400
Are you ready? Yeah? Okay, here we go.

2
00:00:08,192 --> 00:00:12,800
First question for you, who experienced some difficulties

3
00:00:13,056 --> 00:00:15,616
to grasp DDD concept at the very beginning

4
00:00:15,872 --> 00:00:18,944
while it's the time to put it into your project or into your code? 

5
00:00:19,968 --> 00:00:26,112
Yeah ok. So you're not alone. I have to confess

6
00:00:26,368 --> 00:00:28,160
I see a lot of talk about DDD. 

7
00:00:28,416 --> 00:00:28,928
And I

8
00:00:29,184 --> 00:00:32,000
tried to apply on legacy code.

9
00:00:34,768 --> 00:00:35,536
So that's why we've made this session.

10
00:00:37,120 --> 00:00:43,264
Absolutely. At this time here we will mostly talk about technical patterns.

11
00:00:44,032 --> 00:00:50,176
And most likely talking about where and how to put your domain experience of your business

12
00:00:50,432 --> 00:00:51,456
into your code.

13
00:00:51,712 --> 00:00:54,272
Much more than strategical pattern. We'll talk a little bit about it.

14
00:00:54,784 --> 00:00:58,112
But it's rather technical.

15
00:00:58,368 --> 00:00:59,392
on the entire session.

16
00:00:59,648 --> 00:01:04,000
Let's introduce ourself maybe before we move?

17
00:01:06,048 --> 00:01:12,192
Oh yeah. So I'm Bruno Boucard. I'm coming from Paris and I'm a coach.

18
00:01:12,448 --> 00:01:18,080
I'm teaching TDD, BDD and DDD.

19
00:01:18,592 --> 00:01:20,640
And I'm in charge of

20
00:01:20,896 --> 00:01:22,688
BDD meet up in Paris.

21
00:01:23,456 --> 00:01:26,784
Ok, my name is Thomas Pierrain.

22
00:01:27,040 --> 00:01:33,184
I'm working software since 18 years. I'm also co-organize the DDD Paris meetup.

23
00:01:33,440 --> 00:01:35,488
I'm kind of opposite, by use cases and

24
00:01:35,744 --> 00:01:36,512
problems based.

25
00:01:36,768 --> 00:01:40,096
Cause I think we jump too much too soon into the solution based.

26
00:01:40,352 --> 00:01:42,912
All our ? and stuff like that, all solutions.

27
00:01:43,424 --> 00:01:45,472
So this is one of my obsession.

28
00:01:45,984 --> 00:01:49,056
Ok we have some gifts

29
00:01:49,568 --> 00:01:50,080
for you.

30
00:01:50,336 --> 00:01:51,872
So we have two books.

31
00:01:52,384 --> 00:01:58,528
The blue one and the Refactoring by Martin Fowler.

32
00:01:59,808 --> 00:02:03,904
So to win those books you would have to tweet as hell during the session.

33
00:02:04,160 --> 00:02:10,304
Using the #DDDEU.

34
00:02:10,560 --> 00:02:11,840
We have a referee here

35
00:02:12,096 --> 00:02:17,216
So he will have a look at that hash tag. And the most

36
00:02:17,472 --> 00:02:23,616
funny tweet or you can record, you can take picture, you can do jokes about us or about you, whatever

37
00:02:23,872 --> 00:02:28,480
and John will tell us the two winners at the end of the session. All right? Cool.

38
00:02:30,784 --> 00:02:33,344
Our domain for today will be train.

39
00:02:34,624 --> 00:02:40,768
Train is kind of large. Actually so we will focus more on the seat reservation optimazation.

40
00:02:42,304 --> 00:02:48,448
Here is the model of a train. The train which has three coaches. Coach A, coach B, and coach C.

41
00:02:48,960 --> 00:02:50,240
Which has some 

42
00:02:50,496 --> 00:02:53,312
seats already reserved in the orange.

43
00:02:53,568 --> 00:02:55,104
Empty seats are in white.

44
00:02:55,360 --> 00:02:58,176
And here we are asking 6 seats

45
00:02:58,688 --> 00:03:04,832
to be reserved there in the train in blue. This is a simple model but that may help to understand something.

46
00:03:05,088 --> 00:03:06,624
something. Okay?

47
00:03:06,880 --> 00:03:10,720
We have two business rules for today for the system. The first one is

48
00:03:10,976 --> 00:03:15,584
We should not reserve more than 70% of the entire train capacity.

49
00:03:17,120 --> 00:03:20,448
Okay this is the first business rule.The second business rule is

50
00:03:20,704 --> 00:03:24,032
When I want to reserve, I want all my seats in the same coach.

51
00:03:24,288 --> 00:03:26,848
We don't want to split families and friends

52
00:03:27,104 --> 00:03:29,920
between coaches. Right?

53
00:03:30,176 --> 00:03:30,688
Simple.

54
00:03:30,944 --> 00:03:34,784
We are taking those rules from Emily Bache's Train Reservation.

55
00:03:35,296 --> 00:03:39,392
And we've put some crappy code on top of that but... ok

56
00:03:40,160 --> 00:03:46,304
Our domain expert couldn't manage to be with us in Amsterdam today but we talked a lot with him before

57
00:03:46,560 --> 00:03:47,840
previous weeks.

58
00:03:48,096 --> 00:03:49,632
So he talked a lot about rain

59
00:03:50,144 --> 00:03:53,984
He talked about train ID or identifier. He talked about seats.

60
00:03:54,496 --> 00:03:55,264
Coaches.

61
00:03:56,288 --> 00:04:02,432
Reservation attempts and whether or not these reservation attemps are fulfilled.

62
00:04:02,688 --> 00:04:06,784
And you know there are also to book. If I'm to book,

63
00:04:07,808 --> 00:04:09,600
Booking reference we have explained what it is.

64
00:04:10,368 --> 00:04:12,672
Reservation, reservation failure.

65
00:04:13,184 --> 00:04:19,327
That's the word from the expert. Yeah you know the session we have, those words

66
00:04:19,583 --> 00:04:20,095
kind of

67
00:04:22,399 --> 00:04:28,543
So we will work for a start-up company which name is Train Train. They provide

68
00:04:28,799 --> 00:04:32,127
seat reservation service which is basically web API.

69
00:04:32,383 --> 00:04:36,479
And this web API to do its work, he has to rely on the

70
00:04:36,735 --> 00:04:39,295
external backends provided by external companies

71
00:04:39,807 --> 00:04:42,111
So in fact it's SNCF

72
00:04:42,367 --> 00:04:44,927
So the first backends provided by SNCF,

73
00:04:45,439 --> 00:04:48,255
which is extermal to our company, it's Train Data

74
00:04:48,767 --> 00:04:49,791
Basically it's a

75
00:04:50,047 --> 00:04:51,327
train topology service.

76
00:04:51,583 --> 00:04:54,143
Meaning we provide a train event for you.

77
00:04:54,655 --> 00:04:56,959
And we get back the topology of the train meaning

78
00:04:57,215 --> 00:05:03,359
all the coaches and for every coach, all the seats and for every seat, whether or not it's available

79
00:05:03,615 --> 00:05:04,639
or already reserved.

80
00:05:05,919 --> 00:05:06,431
Okay. Quantity

81
00:05:07,199 --> 00:05:13,343
Second one is the booking reference. This is a kind of tricky one because... not tricky

82
00:05:13,599 --> 00:05:14,623
When you buy a ticket, you have an ID

83
00:05:14,879 --> 00:05:21,023
on your train ticket. This is the idea actually. Yeah. But this is a service that only provide a unique identifier. 

84
00:05:21,279 --> 00:05:22,047
We call it

85
00:05:22,303 --> 00:05:23,583
book anything with that.

86
00:05:24,095 --> 00:05:27,423
All we can do is to get a unique identifier

87
00:05:27,679 --> 00:05:28,447
to play with.

88
00:05:29,215 --> 00:05:35,359
And once seat reservation service on the left will have train topology, find available seats,

89
00:05:35,615 --> 00:05:36,127
then,

90
00:05:36,383 --> 00:05:39,199
Getting a booking reference, we actually book

91
00:05:39,711 --> 00:05:40,735
the reservation

92
00:05:40,991 --> 00:05:43,039
through the national train operator service

93
00:05:43,295 --> 00:05:45,855
through the last train booking service.

94
00:05:46,367 --> 00:05:52,511
All right? In terms of we are kind of down streams. We are a tiny start-up in that

95
00:05:52,767 --> 00:05:58,655
open market that hasn't been opened recently. So these are the back-end provided by the national train.

96
00:05:59,167 --> 00:06:00,447
Is it ok for all of you?

97
00:06:01,727 --> 00:06:02,495
We will continue.

98
00:06:03,519 --> 00:06:07,615
Maybe Bruno we can do a demo of the web API

99
00:06:10,175 --> 00:06:10,943
It will take a few

100
00:06:11,199 --> 00:06:12,223
seconds to

101
00:06:12,479 --> 00:06:13,247
switch.

102
00:06:16,575 --> 00:06:17,855
So

103
00:06:18,111 --> 00:06:19,903
I use postman

104
00:06:20,159 --> 00:06:27,231
where you can see the url to call the web API.

105
00:06:27,327 --> 00:06:29,375
And we can see the body

106
00:06:29,631 --> 00:06:33,471
The payload is with two fields.

107
00:06:33,727 --> 00:06:36,031
Train_id is the identifier of the train.

108
00:06:36,287 --> 00:06:39,359
And the number_of_seats requested.

109
00:06:40,127 --> 00:06:40,639
Ok

110
00:06:42,431 --> 00:06:43,711
So if you post.

111
00:06:43,967 --> 00:06:45,247
Yeah.

112
00:06:45,759 --> 00:06:46,527
Take a while.

113
00:06:50,367 --> 00:06:53,695
Still loading. Okay and we have a answer.

114
00:06:53,951 --> 00:06:54,975
The answer.

115
00:06:55,231 --> 00:06:57,023
The first is the train_id.

116
00:06:57,535 --> 00:06:58,047
Okay?

117
00:06:58,303 --> 00:07:00,351
Second one is a booking reference.

118
00:07:00,607 --> 00:07:03,423
Allocated by service as I said before.

119
00:07:03,679 --> 00:07:05,215
And the list of seats

120
00:07:05,983 --> 00:07:11,031
We get back.

121
00:07:13,151 --> 00:07:17,503
Okay. So basically that's quite simple way to interact with our system. Yeah.

122
00:07:25,183 --> 00:07:30,559
Okay. And basically we have a problem. And this is reason why we are here today.

123
00:07:31,071 --> 00:07:35,935
Train Train start-up, called us because they face recurrent penalties,

124
00:07:36,447 --> 00:07:41,311
Excess of penalties by the national train service.

125
00:07:42,079 --> 00:07:43,103
Why?

126
00:07:43,359 --> 00:07:44,383
Every call

127
00:07:44,895 --> 00:07:49,759
You made on all those back-ends, you pay fees. So that means that start-up the Train Train start-up.

128
00:07:50,271 --> 00:07:55,647
Every time you call one of those web API is charged from these.

129
00:07:55,903 --> 00:07:57,439
So they are expected

130
00:07:57,695 --> 00:07:58,719
to do so. But,

131
00:07:59,231 --> 00:08:01,023
they think they are paying too much.

132
00:08:01,279 --> 00:08:03,327
So they asked us to have a look at the code.

133
00:08:03,583 --> 00:08:04,351
And to see

134
00:08:04,607 --> 00:08:08,447
what may be the reason and can we troubleshoot and fix

135
00:08:08,703 --> 00:08:09,983
if we have something to fix

136
00:08:11,519 --> 00:08:17,407
Okay? But before touching any legacy code, if you are... Bruno and I, what would you recommend

137
00:08:19,455 --> 00:08:20,223
us to do?

138
00:08:22,015 --> 00:08:23,807
(Test?) Test, yes absolutely.

139
00:08:24,319 --> 00:08:29,439
In fact, this is the reason why we miss the keynote. We have a bit test on this this morning.

140
00:08:30,207 --> 00:08:33,023
Discovering the code in trying to highlight

141
00:08:33,279 --> 00:08:38,655
all those business rules. So we've made so far 3 exception tests.

142
00:08:39,167 --> 00:08:44,543
First on is a happy pass. We have a train with only one coach

143
00:08:45,055 --> 00:08:49,151
with 10 seats. And we want allocate or reserve 3 seats.

144
00:08:49,407 --> 00:08:52,991
And as you can see that's exactly what I do with postman. And exactly the same answer.

145
00:08:57,855 --> 00:08:59,391
Simple happy pass. Ok.

146
00:09:00,159 --> 00:09:01,695
Second one is the

147
00:09:02,207 --> 00:09:08,351
Yeah this is the first business rule.  We can't exceed 70%,

148
00:09:08,607 --> 00:09:14,751
for reservation , in all the train. And if we ask 2 seats,

149
00:09:15,007 --> 00:09:16,543
and you can see I already have 6 seats reserved,

150
00:09:17,567 --> 00:09:18,335
Here.


151
00:09:19,871 --> 00:09:22,431
Because I applied the rule,

152
00:09:22,943 --> 00:09:28,831
So 70% is 7 seats in the train you can sit. Exactly. So the way to repond an error

153
00:09:29,343 --> 00:09:30,111
is this one

154
00:09:30,623 --> 00:09:33,183
I get the train ID but the booking reference is empty.

155
00:09:33,439 --> 00:09:34,975
And the list of seats are empty.

156
00:09:35,487 --> 00:09:38,047
This is how Train Train is telling us, no

157
00:09:38,559 --> 00:09:40,095
reservation has been made for you.

158
00:09:41,375 --> 00:09:41,887
Ok.

159
00:09:42,143 --> 00:09:48,031
And the third test was... test highlighting the all seats must be in the same coach please.

160
00:09:48,543 --> 00:09:49,823
The second business rule.

161
00:09:50,079 --> 00:09:53,663
And in that case we found a bug. We found a bug because we asked

162
00:09:54,175 --> 00:10:00,319
here we have a train with two coaches. And one is almost full.

163
00:10:00,831 --> 00:10:03,135
The other is completely free. And when we asked 2 seats,

164
00:10:03,647 --> 00:10:09,279
Actually we get here. One seat in coach A and one seat in coach B, which was unexpected because

165
00:10:09,535 --> 00:10:11,071
we don't want to split families and friends.

166
00:10:11,839 --> 00:10:14,143
So we're thinking about that. Bruno was saying that

167
00:10:15,423 --> 00:10:18,239
it may explain something related to this phase.

168
00:10:18,495 --> 00:10:21,567
You have some ideas about what may explain the extra phase.

169
00:10:23,871 --> 00:10:25,407
Imagine you use

170
00:10:25,663 --> 00:10:26,431
the website.

171
00:10:26,943 --> 00:10:28,223
You call the service.

172
00:10:29,247 --> 00:10:31,039
And you prepare a trip

173
00:10:31,295 --> 00:10:33,087
With your family or your

174
00:10:33,855 --> 00:10:35,391
girlfriend boyfriend.

175
00:10:36,183 --> 00:10:40,183
What happened? （Maybe you want to cancel your reservation because you cannot sit with your firend.)

176
00:10:41,279 --> 00:10:45,375
Yeah. Exactly. The answer is to cancel.

177
00:10:45,631 --> 00:10:52,263
Because I'm not pleased to have 2 seats in 2 different coaches. We cancel maybe retry it.

178
00:10:52,543 --> 00:10:57,663
Cancel retry, cancel retry, at the end of the day I will switch to another provider.

179
00:10:57,919 --> 00:10:58,943
I will left Train Train.

180
00:10:59,199 --> 00:11:00,479
Poor experience.

181
00:11:00,735 --> 00:11:05,087
But it may explain that because every time every attempt will be charged actually.

182
00:11:05,599 --> 00:11:08,671
So that was our hypothesis.

183
00:11:09,183 --> 00:11:12,511
And we discussed it with domain expert and he said, yeah,

184
00:11:12,767 --> 00:11:16,351
maybe a new answer, please

185
00:11:16,863 --> 00:11:18,399
guys can you please fix that bug.

186
00:11:18,655 --> 00:11:23,519
So we are here to fix that bug all together. And we will ask you to help us in the journey.

187
00:11:25,055 --> 00:11:27,103
So what would you recommend to fix that bug?
大家现在有什么建议吗？

188
00:11:27,359 --> 00:11:40,639
What would be your strategy? 

189
00:11:41,439 --> 00:11:47,327
We are the train reservation service on the left on the Orange. Here, let me...ok

190
00:11:49,119 --> 00:11:52,703
We are only working on that seat reservation in the yellow.

191
00:11:53,727 --> 00:11:59,055
These are dependencies. We don't have leverage on that actually. (Are you the only cosumer for these)

192
00:12:00,127 --> 00:12:06,271
No we compete with other companies. We are start-up and we compete with other companies.

193
00:12:06,527 --> 00:12:11,391
We need some information from those two and we need to set and to comfirm

194
00:12:11,647 --> 00:12:12,159
and to book

195
00:12:12,671 --> 00:12:14,463
to make transaction with that guy

196
00:12:14,975 --> 00:12:15,487
So

197
00:12:15,999 --> 00:12:17,279
That's kind of interaction we have.

198
00:12:19,327 --> 00:12:23,143
So it's time for the strategy what would you recommend? (Writing tests?) 

199
00:12:23,679 --> 00:12:24,191
Write tests.

200
00:12:24,447 --> 00:12:25,215
Yeah write tests.

201
00:12:25,471 --> 00:12:31,615
So actually we already wrote 2 tests so that highlight the bug. So we will have to fix that test. Ok?

202
00:12:33,663 --> 00:12:35,711
So let's dive into the code.

203
00:12:35,967 --> 00:12:36,735
Bruno has

204
00:12:37,247 --> 00:12:38,271
set breakpoints

205
00:12:39,807 --> 00:12:40,575
We can call it here. Yeah absolutely. Just a minute.

206
00:12:43,135 --> 00:12:44,415
It's launching the bug

207
00:12:45,951 --> 00:12:47,743
So here if you

208
00:12:48,255 --> 00:12:51,071
just slide to the left side of the screen

209
00:12:51,583 --> 00:12:56,447
It's a C# code. It's a asp.net code API.

210
00:12:56,703 --> 00:13:02,847
It's simple for those who are doing java spring boot. It's simple for... When we request that post on networks

211
00:13:03,103 --> 00:13:04,127
with that name

212
00:13:04,383 --> 00:13:07,455
We get that call back

213
00:13:08,479 --> 00:13:12,575
And it's a ReservationRequestDto we receive.

214
00:13:13,087 --> 00:13:18,975
Just to have a look at the Dto. It's very simple, exactly the payload of the json.

215
00:13:19,743 --> 00:13:20,511
Absolutely.

216
00:13:22,559 --> 00:13:28,703
And so after all that, we installed that, if you can slide to the left, thank you. So we installed that

217
00:13:28,959 --> 00:13:33,567
webTicketManager which it seems to be the entry point of the system and we call reserve

218
00:13:34,079 --> 00:13:35,103
method on it,

219
00:13:35,359 --> 00:13:36,895
providing train id and the number of seat requested.

220
00:13:38,943 --> 00:13:39,967
Ok so

221
00:13:40,735 --> 00:13:44,063
This is what we have test so far

222
00:13:44,575 --> 00:13:47,135
If we have a look at the tests. These are failing.

223
00:13:49,951 --> 00:13:50,719
We have 3 tests.

224
00:13:51,743 --> 00:13:54,815
It's like kind of exception tests. We consider these items as black bugs.

225
00:13:55,583 --> 00:13:59,167
And we sent some requests and we checked the

226
00:14:00,703 --> 00:14:01,727
json.

227
00:14:01,983 --> 00:14:03,775
The last one is the test

228
00:14:04,031 --> 00:14:05,823
demonstrate the problem. Ok?

229
00:14:06,079 --> 00:14:11,199
So wait. We have a tool, it's name is ?  We see every time we change

230
00:14:11,455 --> 00:14:17,599
something, we type something, we change the code. It will run the test in background, execute it,

231
00:14:17,855 --> 00:14:23,999
and provide us a feedback loop with a colored arrow on the margin.

232
00:14:24,255 --> 00:14:26,303
So green is fine and red is

233
00:14:26,559 --> 00:14:30,399
there's a problem. And there's an arrow in Red.

234
00:14:30,911 --> 00:14:31,423
Bruno, if you...

235
00:14:31,679 --> 00:14:33,983
Yeah I will show. Have another view of the error.

236
00:14:35,007 --> 00:14:39,103
Basically it's the problem. We are expecting to have

237
00:14:39,615 --> 00:14:42,431
2 seats in 1B and 2B. And actually we get

238
00:14:42,943 --> 00:14:47,295
10A and 1B. So this is the bug we discuss earlier.

239
00:14:48,575 --> 00:14:50,111
Ok everyone?

240
00:14:50,879 --> 00:14:57,023
I think it would be a good thing to stop to have another view of what the Reserve method is doing.

241
00:14:57,279 --> 00:15:01,119
I'll just align the code for you.

242
00:15:01,631 --> 00:15:07,519
Let's have a first overview. We discovered that this morning so we will have

243
00:15:07,775 --> 00:15:12,383
a little bit more knowledge about it. So I will try to help you to

244
00:15:12,639 --> 00:15:13,663
to have an overview.

245
00:15:14,431 --> 00:15:20,575
First we ? a list of available seats. That should be

246
00:15:20,831 --> 00:15:22,367
probably the result of the method.

247
00:15:22,879 --> 00:15:25,695
Then we call a get train on a trainDataService.

248
00:15:26,207 --> 00:15:32,351
And we get something like we call jsonTrain. Maybe is a json topology we will see it after.

249
00:15:33,631 --> 00:15:39,751
Then we install a train. A train installs of ? json topology.

250
00:15:40,287 --> 00:15:44,895
And after that train installed, we do some business rules here and there. So here,

251
00:15:45,407 --> 00:15:51,551
if the number of seat already reserved in the train plus the number of seats I'm requesting

252
00:15:52,063 --> 00:15:53,087
is below,

253
00:15:53,599 --> 00:15:56,159
is below something like GetMaxRes, let me check.

254
00:15:56,415 --> 00:16:00,511
Should be some percentage or something like that. Yeah, 70%.

255
00:16:01,023 --> 00:16:01,535
Ok.

256
00:16:01,791 --> 00:16:04,815
70% of the overall train capacity.

257
00:16:04,863 --> 00:16:05,887
So if

258
00:16:06,143 --> 00:16:09,983
I respect the first business rule, I continue.

259
00:16:10,751 --> 00:16:15,871
I continue. The numberOfReserv seems to be an accumulator variable here

260
00:16:16,127 --> 00:16:18,431
And we tried to find some available seats.

261
00:16:19,199 --> 00:16:24,575
An availble seat in that system is the one that the BookingRef is empty.

262
00:16:25,087 --> 00:16:29,951
We have a property and if it's empty string,

263
00:16:30,463 --> 00:16:32,255
that means that seat is available

264
00:16:32,511 --> 00:16:33,791
And then we can add it

265
00:16:34,047 --> 00:16:34,815
into the list.

266
00:16:35,071 --> 00:16:37,887
The list that we will return at the end of the method

267
00:16:38,399 --> 00:16:39,679
Is it okay for you so for?

268
00:16:41,471 --> 00:16:46,079
Then we have a kind of stupid forEach. We haven't seen that in years ago.

269
00:16:46,335 --> 00:16:50,175
Oh then what do we have yes if we can't

270
00:16:50,943 --> 00:16:56,063
find the number of seat requested, what do we do? We get the answer, you know,

271
00:16:56,319 --> 00:16:59,135
the result that is saying that you can't even reserve.

272
00:16:59,647 --> 00:17:03,231
Remember, it's a failing message.

273
00:17:03,743 --> 00:17:09,887
If it work, that when we call the bookingReferenceService, the one in the middle on the right side.

274
00:17:10,911 --> 00:17:12,447
And call GetBookingReference.

275
00:17:13,983 --> 00:17:15,007
Then we

276
00:17:15,263 --> 00:17:19,615
assign a booking reference to every one of the available seat that we have found.

277
00:17:20,383 --> 00:17:21,151
So far

278
00:17:21,407 --> 00:17:23,967
We have a bunch of accumulators here.

279
00:17:24,479 --> 00:17:26,271
And then, again, it's

280
00:17:26,527 --> 00:17:32,671
pretty much the same if. If you look at...Yeah it seems similar. No the first one is negative.

281
00:17:32,927 --> 00:17:33,951
Not really same. But,

282
00:17:34,207 --> 00:17:40,351
if it's still ok, oh we use the cache? Yeah. Interesting.

283
00:17:40,863 --> 00:17:42,399
We will see that...why, okay?

284
00:17:42,655 --> 00:17:48,799
And then what do we... Actually this is the one that is making the booking, you know.

285
00:17:49,055 --> 00:17:49,567
Transaction actually.

286
00:17:49,823 --> 00:17:54,175
It will be the external web API we call to book a seat.

287
00:17:54,687 --> 00:17:55,455
If I

288
00:17:55,967 --> 00:17:56,991
enter that,

289
00:17:58,527 --> 00:17:59,295
let me check,

290
00:17:59,551 --> 00:18:01,343
here the implemetation.

291
00:18:01,599 --> 00:18:07,231
Yeah basically we call a web API.

292
00:18:07,487 --> 00:18:09,399
Real Interesting.

293
00:18:09,535 --> 00:18:13,375
And it seems that if we don't have any kind of exception here,

294
00:18:13,887 --> 00:18:16,447
what do we do? We return the answer.

295
00:18:17,983 --> 00:18:21,567
And the answer is the one dumping the list of seats

296
00:18:22,079 --> 00:18:24,127
we have found so far. Okay?

297
00:18:24,639 --> 00:18:30,783
And the case here, what was it? Yes, in the case of the train capacity limit

298
00:18:31,039 --> 00:18:33,343
has been exceeded,

299
00:18:33,599 --> 00:18:38,719
we return the empty... you can't reserve anything in that train. It's a failure.

300
00:18:39,743 --> 00:18:41,279
Ok for everyone of you?

301
00:18:42,559 --> 00:18:45,631
We will make a few review working on it. But,

302
00:18:45,887 --> 00:18:47,167
do you have some

303
00:18:47,679 --> 00:18:49,703
feedback about that so far？

304
00:18:49,471 --> 00:18:54,971
(Why are you using string concatenation to create json?)

305
00:18:55,103 --> 00:18:57,919
Why are we using string concatenation to create json?

306
00:18:59,199 --> 00:19:00,479
Actually this is not our code.

307
00:19:00,735 --> 00:19:06,879
As a declarer. This is a customer we discover this morning. So yes, but this is a good remark, why do we

308
00:19:09,695 --> 00:19:15,839
append a json here in the middle of something that, it's expected to be some kind of

309
00:19:16,095 --> 00:19:17,119
business logic.

310
00:19:19,935 --> 00:19:26,079
(Prove it with a github link.) We don't even use git in that project. You know.

311
00:19:26,335 --> 00:19:34,151
So I can't do that. (Maybe I think the business logic is quite intermixed all togather in one function?)

312
00:19:34,215 --> 00:19:35,807
Yeah, you are right.

313
00:19:36,063 --> 00:19:37,855
Yeah absolutely. Yeah.

314
00:19:38,367 --> 00:19:44,255
That is a strategy we will try to apply with you. We try to discover

315
00:19:45,791 --> 00:19:49,327
the domain concept through this code.

316
00:19:50,143 --> 00:19:55,775
And we try to figure out how can we improve that because so far there's something that's really bother me.

317
00:19:57,055 --> 00:20:00,347
We were talking about the domain expert

318
00:20:00,639 --> 00:20:02,687
talking with us with tons of concepts.

319
00:20:03,967 --> 00:20:06,783
Can you see apart the train, and the

320
00:20:07,039 --> 00:20:10,367
concept of seat, do you see any

321
00:20:10,623 --> 00:20:12,991
other concept as well?

322
00:20:13,183 --> 00:20:16,463
There's something missing. (Coach isn't explained. )

323
00:20:16,511 --> 00:20:19,839
Yeah. The concept of coach is completely missing here.

324
00:20:20,095 --> 00:20:22,631
And other stuff? (Reservation?)

325
00:20:22,655 --> 00:20:27,775
Reservation, absolutely. No reservation. No reservation at time so far.

326
00:20:28,031 --> 00:20:30,591
So, who have experienced code like this?

327
00:20:32,127 --> 00:20:33,151
In this case. Some of you.

328
00:20:34,943 --> 00:20:41,087
So we are not alone. So the idea here, for us will be to have a kind of way of

329
00:20:41,343 --> 00:20:42,111
improving it.

330
00:20:42,367 --> 00:20:43,135
Because,

331
00:20:43,391 --> 00:20:46,463
since we don't have any kind of coach here,

332
00:20:46,719 --> 00:20:52,559
the strategy for us to fix the bug would be to make it

333
00:20:52,863 --> 00:20:54,655
But before that,

334
00:20:54,911 --> 00:20:57,471
there's so much crappy thing and like that.

335
00:20:57,727 --> 00:20:59,007
So let's clean,

336
00:20:59,263 --> 00:21:00,799
first clean the deck? Yeah.

337
00:21:01,055 --> 00:21:03,103
Do you know the name clean the deck?

338
00:21:03,359 --> 00:21:04,895
The expression clean the deck? No?

339
00:21:05,407 --> 00:21:06,943
Clean the deck

340
00:21:07,455 --> 00:21:10,527
is the first phase when you discover a code,

341
00:21:10,783 --> 00:21:14,367
because you need to be more confident before

342
00:21:14,623 --> 00:21:18,208
to apply deep refactoring.

343
00:21:18,464 --> 00:21:23,280
It's a way to discover, fix a little

344
00:21:24,096 --> 00:21:25,888
names of the variables, for example,

345
00:21:26,656 --> 00:21:27,424
And after, 

346
00:21:28,192 --> 00:21:34,336
get into the program. Yeah, it's a way to prepare our mental model in your head.

347
00:21:35,992 --> 00:21:40,736
So come back from the beginning, so clean the deck, you will have another view,

348
00:21:40,992 --> 00:21:42,272
trying to improve a little bit.

349
00:21:42,528 --> 00:21:45,344
but before that.

350
00:21:47,392 --> 00:21:53,024
(You have typo in 63.) We have typo in 63? Yeah yeah, it's for sure, for sure. It's really a legacy code.

351
00:21:54,560 --> 00:21:56,864
But you notice something wrong? We'll fix that.

352
00:21:57,888 --> 00:21:58,912
It's red.

353
00:21:59,424 --> 00:22:00,704
It's difficult to

354
00:22:01,472 --> 00:22:05,568
be confident if my code is red because if I made

355
00:22:05,824 --> 00:22:06,592
a mistake,

356
00:22:07,104 --> 00:22:10,176
I don't see the mistake. I prefer to see green

357
00:22:10,688 --> 00:22:11,968
in my tool. So

358
00:22:12,480 --> 00:22:13,248
to do that,

359
00:22:14,016 --> 00:22:17,600
we'll completely ignore the test and just search the bug.

360
00:22:18,112 --> 00:22:19,136
It's a good technique

361
00:22:19,392 --> 00:22:22,720
if you're in the same situation when the test is failing,

362
00:22:23,488 --> 00:22:26,304
and you need to refactor just before fixing the bug

363
00:22:26,816 --> 00:22:30,400
you ignore that test and just search the bug.

364
00:22:30,656 --> 00:22:36,800
So that it's green you have a test on this. You refactor and then you enable back the test to fix the bug.

365
00:22:37,568 --> 00:22:39,080
So this is what

366
00:22:39,360 --> 00:22:40,896
you're doing. And white

367
00:22:41,152 --> 00:22:50,784
is meaning we don't run the test. And now I'm ready. (Fast question. Does it look better to

368
00:22:51,392 --> 00:22:51,904
create a test, which test the

369
00:22:56,000 --> 00:22:57,024
current behavior,

370
00:22:58,560 --> 00:23:00,608
because when your refactoring, you want to basically

371
00:23:02,144 --> 00:23:04,192
maintain the current behaviour.) Yeah.

372
00:23:05,216 --> 00:23:09,568
(So by creating a new test, so that ignore the old test.) Absolutely. (By creating a new test which test the

373
00:23:12,128 --> 00:23:13,664
current behaviour, you can't basically break it.)

374
00:23:15,200 --> 00:23:19,552
Yeah. That is a technique I like a lot which is a golden master.

375
00:23:20,064 --> 00:23:21,856
Golden master is you take a legacy code,

376
00:23:22,368 --> 00:23:23,136
you clone it,

377
00:23:23,648 --> 00:23:27,232
and you write acceptance tests.

378
00:23:27,488 --> 00:23:34,632
Every time I send that input into the legacy code and the new instance, which is the one I will work on,

379
00:23:34,656 --> 00:23:37,216
I'm expecting to see the same output

380
00:23:37,472 --> 00:23:39,264
on both instances.

381
00:23:39,520 --> 00:23:40,800
So that without

382
00:23:41,056 --> 00:23:43,616
even understanding the legacy,

383
00:23:43,872 --> 00:23:45,152
I can have a test on this.

384
00:23:45,408 --> 00:23:50,528
Making me and forcing me... I don't break any existing behavior.

385
00:23:51,040 --> 00:23:57,184
So this is a strategy that we could have done. But here we are implementing the business rule

386
00:23:57,440 --> 00:23:58,976
as a domain expertise.

387
00:23:59,488 --> 00:24:05,632
So we will stick to that point for now. But it's a good way for refactor.

388
00:24:07,168 --> 00:24:08,704
Just clean the deck Bruno.

389
00:24:08,960 --> 00:24:10,752
The first variable,

390
00:24:11,776 --> 00:24:17,056
this is as noticeable, the variable seat.

391
00:24:17,920 --> 00:24:20,444
I'll just have a look

392
00:24:20,736 --> 00:24:23,808
where is used. Far from the usage. Yeah, far.

393
00:24:24,576 --> 00:24:25,088
So

394
00:24:26,880 --> 00:24:27,904
maybe,

395
00:24:29,952 --> 00:24:32,768
I can decide to move this one

396
00:24:33,280 --> 00:24:35,328
close to the usage.

397
00:24:37,632 --> 00:24:40,704
Here for example. In the back of the room can you see all the code?

398
00:24:40,960 --> 00:24:47,104
Because my test is running in real time I know I'm not breaking the code. It's still green.

399
00:24:48,896 --> 00:24:55,040
The behavior of the C programmer, because I was a C programmer, was to put

400
00:24:55,296 --> 00:24:58,112
all the variable at the beginning of the code.

401
00:24:58,368 --> 00:24:59,904
So this is your...?

402
00:25:00,160 --> 00:25:06,304
No it's not mine. Ok, second one is count.

403
00:25:07,840 --> 00:25:10,656
Count, so... What a name.

404
00:25:11,424 --> 00:25:12,448
Yeah, count, wow.

405
00:25:13,984 --> 00:25:17,568
What a stupid loop. Yeah, we're looping on the list.

406
00:25:17,824 --> 00:25:19,872
Actually it's a list of property count.

407
00:25:20,128 --> 00:25:22,432
It's exactly the same number.

408
00:25:22,688 --> 00:25:28,832
We have a hint here. It's unused. Maybe ? developer want to say something?

409
00:25:29,392 --> 00:25:34,208
So what I can do is maybe to use

410
00:25:34,720 --> 00:25:35,488
availabelSeats.

411
00:25:35,744 --> 00:25:36,512
And apply count property.

412
00:25:36,768 --> 00:25:40,864
Yeah because at the end of the for each loop, count will have the same

413
00:25:41,120 --> 00:25:43,680
value as availableSeats. I can remove this one.

414
00:25:43,936 --> 00:25:44,448
Okay?

415
00:25:45,216 --> 00:25:46,240
Cool, I'll leave it.

416
00:25:46,496 --> 00:25:50,848
On this screen hight, do we have ah...before we...We can check.

417
00:25:51,616 --> 00:25:52,640
One, two.

418
00:25:53,664 --> 00:25:54,176
Two

419
00:25:54,432 --> 00:25:56,736
Two and a half? Two and a half, yeah. 

420
00:25:57,504 --> 00:26:00,576
So that was another thing that bother me to have a method like that.

421
00:26:01,344 --> 00:26:02,112
Ok.

422
00:26:03,392 --> 00:26:10,536
Ok, this is a code for the train topology.

423
00:26:11,072 --> 00:26:12,352
Maybe we can rename it?

424
00:26:14,400 --> 00:26:15,424
Yeah. Ok?

425
00:26:15,680 --> 00:26:16,192
Train topology?

426
00:26:16,448 --> 00:26:17,216
Yeah that' fine.

427
00:26:17,472 --> 00:26:23,616
Traintopol and you can...Topology is better. That may explain we were talking about

428
00:26:23,872 --> 00:26:30,016
the  train topology. So that's better. Okay, trainInst.

429
00:26:30,528 --> 00:26:32,320
Instruction? Instance?

430
00:26:32,832 --> 00:26:37,952
We asked domain expert about that, he said no I'm not aware of train instance by domain. So,

431
00:26:38,464 --> 00:26:44,352
should be train install maybe or. So let's treat its name into train. Yeah. So you install a train from a trainTopology ok? Yeah.

432
00:26:45,632 --> 00:26:48,192
What is this guy?

433
00:26:48,448 --> 00:26:52,032
numberOfReserv. Maybe you can just...

434
00:26:52,288 --> 00:26:57,152
Put it here for people in the back to see everything. Ok. You see this one?

435
00:26:58,944 --> 00:27:02,272
numberOfReserv. Is it used? Yeah.

436
00:27:03,040 --> 00:27:05,088
It's a pattern actually.

437
00:27:05,344 --> 00:27:09,696
We use a variable

438
00:27:09,952 --> 00:27:16,096
for nothing and... Just in case the calculation, that count is wrong maybe you can have a...

439
00:27:16,352 --> 00:27:19,936
Maybe that's intends? I don't know.

440
00:27:20,192 --> 00:27:24,776
Some times we don't have to try to understand. This is just silly stuff.

441
00:27:26,848 --> 00:27:29,408
Ok, so I can remove this one.

442
00:27:29,664 --> 00:27:32,480
Ok so you get rid of it. Yeah I get rid of this one.

443
00:27:35,040 --> 00:27:35,808
Ok you can delete it.

444
00:27:36,064 --> 00:27:36,576
Yeah.

445
00:27:36,832 --> 00:27:42,976
Maybe...Each is？ Each...

446
00:27:43,232 --> 00:27:47,840
It's seat. Yes, from collection of Seats, we get a seat.

447
00:27:48,608 --> 00:27:53,216
This is a typo. reservedSet.

448
00:27:53,728 --> 00:27:59,872
We don't talk about set. We've asked the domain expert also, do we even have set? They said no. This is a loop too.

449
00:28:03,968 --> 00:28:04,992
But never used.

450
00:28:06,272 --> 00:28:07,808
Who has already seen that kind of 

451
00:28:08,064 --> 00:28:13,696
variables, declarations in the code not even used anymore

452
00:28:14,976 --> 00:28:16,512
Yeah. Legacy code is full of

453
00:28:16,768 --> 00:28:18,280
this kind of stuff.

454
00:28:18,816 --> 00:28:21,376
And it's kind of polluting our mind.

455
00:28:23,424 --> 00:28:24,704
This one.

456
00:28:24,960 --> 00:28:27,008
Have a look at this one. We have

457
00:28:29,056 --> 00:28:32,896
a if here. And we have pretty much the same if at the invest?

458
00:28:34,176 --> 00:28:35,200
Yeah I'll just...

459
00:28:35,456 --> 00:28:44,600
We like symmetry it's much better to compare stuff. To do so, as we suggested, to invest? Yeah, it's a good a idea.

460
00:28:44,928 --> 00:28:47,232
Indent, invest if, and then,

461
00:28:47,488 --> 00:28:50,304
ok we can see pretty much the same...

462
00:28:51,328 --> 00:28:53,632
I will select...No, no, wait.

463
00:28:53,888 --> 00:28:54,656
Just illustrate it.

464
00:28:56,192 --> 00:28:58,752
Here, as you can see there is one if. Here.

465
00:29:00,032 --> 00:29:02,080
And pretty much the same here.

466
00:29:02,592 --> 00:29:08,224
So the idea is since there is nothing in the middle we can cut the code into the if below.

467
00:29:08,480 --> 00:29:11,552
And put it into the end of the first if.

468
00:29:11,808 --> 00:29:14,880
This one, just at the end, to respect the algorithm.

469
00:29:16,928 --> 00:29:17,440
So

470
00:29:18,976 --> 00:29:22,560
it will simplify a little bit the code structure also.

471
00:29:22,816 --> 00:29:26,912
It's really great. Green yeah. Okay?

472
00:29:27,936 --> 00:29:28,448
So now you can...Read

473
00:29:28,704 --> 00:29:34,848
Why are you doing that? Because... It's white. Yeah. Entrnce?, when the code

474
00:29:35,104 --> 00:29:36,640
is not covered,

475
00:29:38,432 --> 00:29:38,944
put a white

476
00:29:39,200 --> 00:29:40,480
indicator.

477
00:29:41,248 --> 00:29:42,016
It's a

478
00:29:42,528 --> 00:29:45,600
good for us. This one is not necessary too.

479
00:29:48,160 --> 00:29:50,464
Ok, you can remove some lines.

480
00:29:50,720 --> 00:29:52,256
So I think we...

481
00:29:52,512 --> 00:29:58,144
have some space? Yeah maybe this one can be closer to the usage.

482
00:29:58,912 --> 00:29:59,936
Ok.

483
00:30:01,472 --> 00:30:02,496
Ok so you

484
00:30:03,008 --> 00:30:06,848
closer the declaration to the usage. And it's not perfect, but

485
00:30:07,360 --> 00:30:09,408
we changed a little bit.

486
00:30:09,920 --> 00:30:14,272
Not so much. It's not really a deep refactory. It's just to be more confident.

487
00:30:14,528 --> 00:30:17,344
It's the first round, the first pass on the code,

488
00:30:17,600 --> 00:30:20,416
when improving our mental model about it

489
00:30:20,928 --> 00:30:22,976
and trying to clean up some mess.
