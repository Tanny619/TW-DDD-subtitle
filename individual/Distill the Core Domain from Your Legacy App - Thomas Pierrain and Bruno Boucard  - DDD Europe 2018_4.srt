1
01:25:53,670 --> 01:26:04,620
yeah maybe we can have a tiny part
about aggregates yeah so just a tiny

2
01:26:04,620 --> 01:26:09,000
part about aggregates. Aggregates is a 
collection of objects which is entity and value types

3
01:26:09,000 --> 01:26:16,220
treated as a conceptual whole. Can
you see some aggregates in here

4
01:26:18,460 --> 01:26:30,470
train? yeah. Is coach an aggregate? no.
why is that?[Audience]yeah some aggregates mayby immutable.

5
01:26:30,470 --> 01:26:34,490
Actually it's
no because aggregates need invariants,
need business rules need something to to

6
01:26:36,800 --> 01:26:42,560
to to
yeah to be enforced I would say. And here

7
01:26:42,560 --> 01:26:49,130
the only variants we have is train level.

8
01:26:49,130 --> 01:26:53,600
they must not exceed 70 percent of the
train tickets limited which is the business I

9
01:26:53,600 --> 01:27:01,130
own and the coach aggregates as to as
to to enforced when we discuss with the

10
01:27:01,130 --> 01:27:05,210
domain expert he told us that he
wanted to add some new rules related to the coach.

11
01:27:05,210 --> 01:27:11,000
so that coach must not be
fulfilled also at must not be exceed 

12
01:27:11,000 --> 01:27:15,980
given capacity so in that case it will
turn into an aggregate voice maybe it's

13
01:27:15,980 --> 01:27:22,850
a kind of detail. But something
interesting. Train, coach and seat may

14
01:27:22,850 --> 01:27:28,760
all be value types here. as we discuss
earlier if we think about the way we

15
01:27:28,760 --> 01:27:33,850
interact with the external backend we
get a kind of snapshot valid from a

16
01:27:33,850 --> 01:27:40,280
moment of time and we will work on that
snapshot. so we don't want to keep it in
cache. We just want to work with all those

17
01:27:43,340 --> 01:27:49,880
aggregates. fine cells so to enforce that
we can make it all value types. actually

18
01:27:49,880 --> 01:27:53,090
in the long term Russian we that's what
we did

19
01:27:53,090 --> 01:28:03,080
so that means that some aggregates may
be completely value types also.[Audience] yeah the

20
01:28:03,080 --> 01:28:10,430
trend here it most of the case it's like
this message was to it was one 

21
01:28:10,430 --> 01:28:15,340
case where we could have this exception [Audience]

22
01:28:27,380 --> 01:28:32,519
if we have a level-two Business School
to be enforced at the coach level it.

23
01:28:32,519 --> 01:28:37,289
Yeah, in the long version we do that. So so far we
improved somehow the web ticket manager

24
01:28:39,300 --> 01:28:45,179
and the before it was a free screen
high, full of legacy code with lots

25
01:28:45,179 --> 01:28:50,880
of legacy stuff yeah. I think we have
kind of improved a little bit it's one

26
01:28:50,880 --> 01:28:56,309
screen high. It's using the word of the
domain within the code what we call

27
01:28:56,309 --> 01:29:02,130
ubiquitous language. we extract some
behaviors and we put them into the proper

28
01:29:02,130 --> 01:29:07,769
locations, but there is still something
that botheres us. someone has told it

29
01:29:07,769 --> 01:29:15,959
before this is that we have some Json
 design into the domain method

30
01:29:15,959 --> 01:29:22,110
and we still have our Task of strings
which is also a jism. yeah what we would

31
01:29:22,110 --> 01:29:28,380
like to do here is to get rid of that
design, and stuff and to replace it by

32
01:29:28,380 --> 01:29:35,579
reserve. sorry, reservation. So
that the Reserve method will return a

33
01:29:35,579 --> 01:29:41,249
reservation. then on the infrastructure side
side and we will transform

34
01:29:41,249 --> 01:29:45,989
the Reservation into a json version,
if we have an adapter if we have

35
01:29:45,989 --> 01:29:50,340
something pluggable. okay so I
suggest I will talk a little bit about

36
01:29:50,340 --> 01:29:52,979
the second equation which slide. I'm
sorry

37
01:29:52,979 --> 01:30:00,179
I will work on the code you
don't see. but it will explain when we

38
01:30:00,179 --> 01:30:04,380
get back to the code and like an
architecture we explain what we have done.

39
01:30:04,380 --> 01:30:10,590
okay
so who is aware of what hexagonal architecture is?

40
01:30:10,590 --> 01:30:18,420
okay cool what hexagonal 
architecture pattern is made

41
01:30:18,420 --> 01:30:24,090
by Alistair Cockburn.
I can't remember, the long time ago.

42
01:30:24,090 --> 01:30:28,940
and it has many benefits. it's a pattern
at the architectural level it's known as to

43
01:30:33,620 --> 01:30:40,370
embrace change it was the first idea of
Alistair was to plug and unplug external

44
01:30:40,370 --> 01:30:46,460
dependencies plug and unplug stuff he
was talking about whether system able to

45
01:30:46,460 --> 01:30:51,260
to be plugged with many different
standards as input and many different

46
01:30:51,260 --> 01:30:56,780
stutters as output to broadcast news to
broadcast to TV to radio to whatever.
so it was kind of to have

47
01:31:00,830 --> 01:31:07,220
of clean code inside and every changes
in terms of i/o or way to interact with

48
01:31:07,220 --> 01:31:12,290
the system to be a non-event to be
something like you plug a plug in and

49
01:31:12,290 --> 01:31:17,900
you can plug a plug in and that's it so
it's it's come with it was introduced by

50
01:31:17,900 --> 01:31:25,040
that idea in mind but when we think
about it, it may allow us that we want to

51
01:31:25,040 --> 01:31:30,320
first on the domain to make some code
more value, business value inside to

52
01:31:30,320 --> 01:31:36,310
protect our domain code from the
technical stuff. I don't know for you but

53
01:31:36,310 --> 01:31:40,790
during long time I thought it was not
even possible to properly split between

54
01:31:40,790 --> 01:31:46,070
domain logic and and technical. We
tried many times that we failed a lot and

55
01:31:46,070 --> 01:31:51,880
seems I discovered that pattern.
it's really a nice way to and for that

56
01:31:51,880 --> 01:31:56,330
and I also want to enforce testability because
since everything is a pluggable and

57
01:31:56,330 --> 01:32:02,150
We can stub, we can mock, we can
stub the input output of the

58
01:32:02,150 --> 01:32:07,730
systems, business logic inside and so for
today we will focus much more the how to

59
01:32:07,730 --> 01:32:12,350
protect our domain code. So how does it work?
It works

60
01:32:12,350 --> 01:32:16,460
considering the world in two different
area there is inside and there is

61
01:32:16,460 --> 01:32:21,440
outside
simple, right? No thousands of layers, no...

62
01:32:21,440 --> 01:32:27,410
simply two area, the inside is a domain
it's your domain code like

63
01:32:27,410 --> 01:32:30,680
method like the train, the
reservationAttempt, the stuff like that

64
01:32:30,680 --> 01:32:36,560
and the infrastructure code is at the
outside of your system. So this

65
01:32:36,560 --> 01:32:39,710
is where you will find your favorite
HTTP stack,

66
01:32:39,710 --> 01:32:43,520
your database drivers, your
message middleware, your favorite solution.

67
01:32:43,520 --> 01:32:47,110
or whatever. This is
infrastructure side, code. which I've got
and what we want is to first

68
01:32:50,390 --> 01:32:56,390
improve the domain code so we have
diversity she is some kind of putting

69
01:32:56,390 --> 01:33:03,080
some  barriers around your domain code and
defining some entry points to enter and

70
01:33:03,080 --> 01:33:08,810
to leave the the domain code. So you keep
the infrasturcture code at the other

71
01:33:08,810 --> 01:33:15,860
side. This is a nice capability actually
because I don't know for you but when
you start your career as a developer you

72
01:33:17,660 --> 01:33:21,260
need to improve your skills, you need to
discover new thing you need to do lot

73
01:33:21,260 --> 01:33:26,270
of mistakes you need to implement you
own framework in order to realize

74
01:33:26,270 --> 01:33:30,140
at one point that there are some silly
stuff like implementing your framework

75
01:33:30,140 --> 01:33:36,230
stuff like that. But before you focus on
the domain really, it's still important
for some new young developers to be able

76
01:33:38,750 --> 01:33:43,370
to play in a kind of playground. I'm
okay with that

77
01:33:43,370 --> 01:33:48,500
as much as it does not jeopardize the
business value and the project and in

78
01:33:48,500 --> 01:33:51,800
that case I'm happy with that because
there is a kind of location where you

79
01:33:51,800 --> 01:33:56,180
can play. It's a playground your infrastructure
code. You can try new technology new

80
01:33:56,180 --> 01:34:01,130
stuffs without jeopardizing
the domain code. So this is what I really

81
01:34:01,130 --> 01:34:05,719
like in that pattern. So how does
it work, because there are barriers

82
01:34:05,719 --> 01:34:09,560
but I need to enter and to leave the
building, I would say that, to leave the

83
01:34:09,560 --> 01:34:13,880
domain code. So to do so in terms of
dependencies, all dependencies are

84
01:34:13,880 --> 01:34:17,330
towards inside. believes the
infrastructure code is aware of

85
01:34:17,330 --> 01:34:22,489
reference of domain code, but of course the
domain code should not be aware to any

86
01:34:22,489 --> 01:34:29,110
framework. Even Jesus stuff. It seemed
like that so the domain is completely

87
01:34:29,110 --> 01:34:36,770
independent from any kind of technology
even Json string or thing like that. So

88
01:34:36,770 --> 01:34:42,800
to allow us to move from the
inside to the outside to ask new thing

89
01:34:42,800 --> 01:34:47,870
to talk with external web api and do
some stuff, we will rely on ports and

90
01:34:47,870 --> 01:34:53,180
adapters. And to do so we are actually
using

91
01:34:53,180 --> 01:34:58,160
inversion dependency principle, so that
from the inside we can go outside and do

92
01:34:58,160 --> 01:35:04,130
some stuff. Alistair Cockbrun recently
discussed with an another guy I can't

93
01:35:04,130 --> 01:35:07,910
remember the name and that was
suggesting the name of configurable

94
01:35:07,910 --> 01:35:12,920
dependencies. What Alistair was saying is
dependency injection principle I don't

95
01:35:12,920 --> 01:35:17,840
really like because this is like if
negative way of formulating things. It's

96
01:35:17,840 --> 01:35:23,900
you used to do that do the other way
around do the inverse so he was trying
to find a much more fluent intention way

97
01:35:27,080 --> 01:35:32,660
of saying that, so they lead to
configurable dependencies so you plug

98
01:35:32,660 --> 01:35:41,420
and unplug your dependencies around your main.
So if we get back to a case

99
01:35:41,420 --> 01:35:47,420
here we say we have ports and adapter
to enter and to leave the domain. So

100
01:35:47,420 --> 01:35:52,550
ports belongs to the domain and there
are some interfaces like lollipops here

101
01:35:52,550 --> 01:35:57,440
so here I've got the IReserveSeats which
is the entry point from the
tata system. so I had through an

102
01:36:00,770 --> 01:36:07,340
adapter HTTP adapter IP dot net callback
I must call an interface which is a port

103
01:36:07,340 --> 01:36:14,930
I have another seat, say please reserve
me something and I get a

104
01:36:14,930 --> 01:36:19,190
reservation and that adapter will do the
rotation between the reservation and the
Json version because the Json that so it

105
01:36:23,810 --> 01:36:29,840
will be the proper location to do so
when I need to form a business rule

106
01:36:29,840 --> 01:36:35,090
when I need some extra data some extra
thing if not provided by everything I

107
01:36:35,090 --> 01:36:41,270
need from the beginning there are many
ways to do that but if let say I need to

108
01:36:41,270 --> 01:36:47,390
ask one of the external
SSL dependency you know the three web

109
01:36:47,390 --> 01:36:52,160
api we call during the process, we need
to access, we need to add something to
the outside, so to do so we asked some

110
01:36:54,940 --> 01:37:00,680
ports also made from the inside there is
IBookSeats interface there is IProvideTrainTopology

111
01:37:00,680 --> 01:37:05,840
interface and there is
IGetBookingRef interface. these

112
01:37:05,840 --> 01:37:09,270
are domain interface
the port still

113
01:37:09,270 --> 01:37:14,010
belongs to the domain reason why the
lollipop is in blue

114
01:37:14,010 --> 01:37:17,970
but the adapter is what belongs to infrastructure

115
01:37:17,970 --> 01:37:22,170
so basically adapter is something that
maps between the infrastructure code to

116
01:37:22,170 --> 01:37:28,620
the domain one and vice-versa. Is that OK for
all of you? yeah? we'll see that in

117
01:37:28,620 --> 01:37:36,060
the code in a few minutes. so port and
adapter to go in and to go out. easy, right? okay

118
01:37:36,060 --> 01:37:40,650
but when we try to implement it the
first time there's tons of question that
arouse and there are many ways to

119
01:37:45,540 --> 01:37:50,880
do so. We'll show you one. we have to
initialize we have to init to initiate

120
01:37:50,880 --> 01:37:59,520
you are to build you
have to build the stuff so I like I've

121
01:37:59,520 --> 01:38:02,670
got a metaphor which is a key ring
metaphor to explain that to my

122
01:38:02,670 --> 01:38:07,710
mate I try to explain to you. First step,
its we will talk here about the

123
01:38:07,710 --> 01:38:11,700
composition of utopian application, you
know, the place on your application

124
01:38:11,700 --> 01:38:17,070
where you build all your dependencies
and then voila apply the system is able

125
01:38:17,070 --> 01:38:22,320
to work and to do is work okay so we're
talking about the bootstrap of your

126
01:38:22,320 --> 01:38:27,000
application here so three steps first
step is to instantiate I need to go out

127
01:38:27,000 --> 01:38:32,760
adapters. All the adapters go to ask
to the SSL back-end "please give me a

128
01:38:32,760 --> 01:38:36,360
topology please
so here represented twp Train Data Service Adapter
and Booking Reference Service Adapter

129
01:38:38,340 --> 01:38:44,460
adapter these are like keys to go
outside and to ask stuff, so the first step

130
01:38:44,460 --> 01:38:49,980
is access those keys. Then second step
is I've got those keys, I wrapped them
with

131
01:38:52,200 --> 01:38:57,330
hexagon, with the domain. the hexagon is
where the domain stay so it's a web ticket manager.

132
01:38:57,330 --> 01:39:01,440
So the web ticket manager
will receive within its console ports 

133
01:39:01,440 --> 01:39:09,930
interface to interact with the
outside world and then we instantiate we

134
01:39:09,930 --> 01:39:14,400
wrapped the hexagon with a new
adapter which will be the adapter to be
used in order to

135
01:39:17,250 --> 01:39:22,890
interact with our system so it's "I need to enter" adapters
that it's the way to

136
01:39:22,890 --> 01:39:27,660
communicate with our application, but
once we do that all we have to keep in
our hand from an application perspective

137
01:39:29,570 --> 01:39:35,070
from the asp.net Web API perspective all
I have to keep in my hand will be the entrypoint adapter

138
01:39:35,070 --> 01:39:39,540
so all the rest of the hexagon

139
01:39:39,540 --> 01:39:46,590
and adapters it's an implementation
details once I've built the place all I

140
01:39:46,590 --> 01:39:51,660
have to keep from our Web API
perspective is that adapter which is the

141
01:39:51,660 --> 01:39:58,110
entry point from a formal system. okay? to
put it differently those three steps

142
01:39:58,110 --> 01:40:04,199
looking at them in the diagram. First we instantiate
the adapter we need to go out, so

143
01:40:04,199 --> 01:40:07,980
the three back ends then we wrap
them with hexagon

144
01:40:07,980 --> 01:40:13,440
whereas domain logic stands and then we
wrap that domain logic it's like Russian

145
01:40:13,440 --> 01:40:18,000
doll you know I need to go out the hexagon I need to go in and at the end of

146
01:40:18,000 --> 01:40:21,660
the day all you keep in your hands - I
need to go in. This is the only thing

147
01:40:21,660 --> 01:40:26,270
that you need to interact with
system from application perspective

148
01:40:26,270 --> 01:40:30,960
so all you keep in your line will be
only that adapter that you will inject

149
01:40:30,960 --> 01:40:38,489
into your callback I speed up the
corners and stuff like that. okay? sure
you have some question we will call it

150
01:40:41,400 --> 01:40:51,440
or hope you will have some questions. so
just to have a look on the new version

151
01:40:51,440 --> 01:41:00,080
you can notice now we have a reservation
and the modification has been to call a

152
01:41:00,080 --> 01:41:09,410
confirm because after this line I know
there is no exception and I can return

153
01:41:09,410 --> 01:41:16,230
the reservation. so the did, the
modification of the test is there, yeah, we

154
01:41:16,230 --> 01:41:23,429
returned a reservation and I already
create a beginning of adapter, the output

155
01:41:23,429 --> 01:41:31,380
adapter with AdaptReservation.
 This function will be called by Thomas in

156
01:41:31,380 --> 01:41:35,199
a few minutes, so you start to move
the technical json implementation to the
proper place. exactly. okay. what I suggest

157
01:41:38,469 --> 01:41:44,499
is to for me to to reduce in that first
acceptance test what I will have to do

158
01:41:44,499 --> 01:41:53,229
into my bootstrap my composition route
okay, so first one is to step one is to

159
01:41:53,229 --> 01:41:58,539
instantiate "I want to go out" adapter. so
here trainDataService for instance we
can even rename it to trainDataServicesAdapter.

160
01:42:00,820 --> 01:42:05,949
it's a bad name, it's still the
service. that's obviously I was there

161
01:42:05,949 --> 01:42:14,439
it's a proxy too. and same thing for
that bookingReferenceServiceAdapter. okay, step one I instantiate

162
01:42:14,439 --> 01:42:17,349
the dependencies I need to go to the
outside world

163
01:42:17,349 --> 01:42:24,489
yeah? all right, then what I need is to
instantiate the hexagon. actually so the
exact on here is a web ticket manager. so

164
01:42:27,189 --> 01:42:35,260
let's call it hexagon only here for
pedagogical school perspective over your

165
01:42:35,260 --> 01:42:41,039
life you don't you will call it with a
business name so please don't tell Eric
that we did that but just it's to focus

166
01:42:45,280 --> 01:42:48,999
on the hexagon and infrastructure here.
it's better for me to rename it hexagon

167
01:42:48,999 --> 01:42:53,349
here and then instead of
calling directly the hexagon

168
01:42:53,349 --> 01:42:58,719
all I have said before is the
application we would have to interact

169
01:42:58,719 --> 01:43:01,599
with my business logic through an
adapter yeah

170
01:43:01,599 --> 01:43:06,939
so let's introduce it. yeah, step 3
instantiate "I want to go in" adaptor, so

171
01:43:06,939 --> 01:43:13,269
here but I can do is to how can we
generation oh yeah you already

172
01:43:13,269 --> 01:43:20,409
came same name, so I will
instantiate it providing what should I
provide. okay I think I got a sense like

173
01:43:25,059 --> 01:43:30,159
Russian dolls so those two first we are
providing to the hexagon here and the
hexagon is provided to the 

174
01:43:32,829 --> 01:43:39,189
guy. okay so I create a constructor
because so far you just had made a

175
01:43:39,189 --> 01:43:44,709
static functions. okay maybe you have to
make that abstraction
not to inject what ticket manager yes

176
01:43:48,969 --> 01:43:53,590
actually yes you're right, we talked
about personnel at the ports are like

177
01:43:53,590 --> 01:44:00,429
interfaces so what I can do maybe is on
the web ticket manager here it's

178
01:44:00,429 --> 01:44:06,670
introducing its we changed after so
let's create an interface for that and

179
01:44:06,670 --> 01:44:20,170
let's say I reserve seats, something like that? em...
Sorry, I used to work on the Mac,

180
01:44:20,170 --> 01:44:25,300
so we try to pick a keyboard
IReserveSeats

181
01:44:25,300 --> 01:44:33,039
you work every day on the PC
yes, but not the same keyboard  I tried to find

182
01:44:33,039 --> 01:44:44,729
exeucise, stress yeah so I asked I add
the reserve method on that interface.

183
01:44:44,729 --> 01:44:49,929
here this is a port this is a port in
order to enter the hexagon

184
01:44:49,929 --> 01:44:56,559
so getting back to the code here
what I will provide to the external

185
01:44:56,559 --> 01:45:04,150
adapter it will be the hexagon but as
oops, go to implementation as charlie
reserved seats yeah IReserveSeat.

186
01:45:07,860 --> 01:45:16,150
okay let me keep it into a private field
here I will need it. so I start set a

187
01:45:16,150 --> 01:45:22,689
reservation adapter okay so third step to
associate other nationality let's

188
01:45:22,689 --> 01:45:29,469
introduce a variable for that with our
instance okay my idea will be to replace

189
01:45:29,469 --> 01:45:34,959
the direct call to the hexagon by
something going through the adapter you

190
01:45:34,959 --> 01:45:40,539
know. so just to make it compile I will
go to the controller to web controller

191
01:45:40,539 --> 01:45:46,479
which is the place where I will use that
exact same adapter so in that controller

192
01:45:46,479 --> 01:45:53,079
here I will need to my entry point will
be together reservation request dto so I
will get a reservation request dto

193
01:45:54,909 --> 01:45:59,710
give it to the adapter and the adapter
will get back to me with a Json

194
01:45:59,710 --> 01:46:06,590
relating to the reservation okay? so to
do so I think the reservation dto is not

195
01:46:06,590 --> 01:46:11,420
in the proper place. I won't be able to
access it from the from the test. So

196
01:46:11,420 --> 01:46:16,580
I suggest that we move that and maybe it
will be no envision is quite painful to

197
01:46:16,580 --> 01:46:21,830
create project it's long so I will just
create a directory here. I will create

198
01:46:21,830 --> 01:46:25,850
Train Train domain all right and
infra

199
01:46:25,850 --> 01:46:33,620
so that we can start to split infra
(infrastructure) and so that we
can we are able to speak properly every

200
01:46:36,590 --> 01:46:43,190
type into the proper location. I'd moved
typed into matching files for be sure
that every file match to type so

201
01:46:45,860 --> 01:46:53,090
BookingReferenceService where should I put
domain or infra

202
01:46:53,090 --> 01:47:02,200
service. it's a bad name, the
name will be different but yeah coach

203
01:47:02,200 --> 01:47:11,600
domain yeah IBookingReferenceService 
yeah it's an interface so it's a port

204
01:47:11,600 --> 01:47:20,570
yeah actually here so domain yeah. IReservedSeats?
port, so the domain, yeah

205
01:47:21,950 --> 01:47:29,090
ITrainDataservice, its names but
it's a domain is it okay its interface

206
01:47:29,090 --> 01:47:35,860
yeah reservation domain, right?
reserved I shall attempt same
reservation hotel for you , same

207
01:47:39,640 --> 01:47:43,820
reservationFailure also it's a
domain.
actually it's much more something to

208
01:47:45,290 --> 01:47:49,340
implement the biggest law where there is
no added value more than twelve toppling

209
01:47:49,340 --> 01:47:55,430
seats? domain. I'm kind of happy
because you have more domains than the

210
01:47:55,430 --> 01:48:02,740
infrastructur which is not the case in
all my projects so far so SeatJsonPoco

211
01:48:03,370 --> 01:48:10,280
SeatsReservationAdapter? infrastructure, yeah

212
01:48:10,280 --> 01:48:15,060
ThreadsholdTrainCapacity? domain, absolutely even if we

213
01:48:15,060 --> 01:48:24,030
came in through the name. Train? is it
domain and what do we have? TimeDataSservice,
 of course which is another time

214
01:48:28,620 --> 01:48:36,450
and WebTicketManager, domain. it's
all exactly but so far it's seen as some

215
01:48:36,450 --> 01:48:45,480
to HTTP rationale that we get rid no
it's okay so let's put it to the... let's

216
01:48:45,480 --> 01:48:48,230
keep it in the middle

217
01:48:49,370 --> 01:48:54,390
let's keep it into the middle before we
completely clean the house and put it in

218
01:48:54,390 --> 01:48:57,930
adjust the namespace
sorry I just enhancement yeah I would

219
01:48:57,930 --> 01:49:03,060
adjust the namespace here for the project.
 so that everyone would be at

220
01:49:03,060 --> 01:49:16,080
the proper location okay. so what I was
saying is I will from the should TrainTrainShould
getting back to the test

221
01:49:19,080 --> 01:49:22,620
okay
I said that I would like to introduce a

222
01:49:22,620 --> 01:49:28,680
way to interact with the ReservationAdapter,
 so let's say it's a Post dto.

223
01:49:28,680 --> 01:49:34,440
there is a better name to
find but new reservation request
diffuses I don't know if you you move it

224
01:49:36,630 --> 01:49:43,530
I don't know I didn't move thanks below
so ReservationRequestDto I

225
01:49:43,530 --> 01:49:54,390
have to move is it's on the bad project.
move to folder... TrainTrain infra

226
01:49:54,390 --> 01:50:00,360
so now I will be able to reference it
from the test, otherwise it will be part
of the Web API which has no reference so

227
01:50:03,630 --> 01:50:10,290
far okay. so we here I will instantiate a
new reservation request dto. This is ASP.net

228
01:50:10,290 --> 01:50:16,290
which used to instantiate
that for me but our number_of_seats here

229
01:50:16,290 --> 01:50:23,530
will be seatsRequestedCount and
the other train_id

230
01:50:23,530 --> 01:50:29,890
setting the
equivalent of the Json we receive as

231
01:50:29,890 --> 01:50:33,520
the input
it's a poco for it will be

232
01:50:33,520 --> 01:50:42,570
TraineId. here is my train
yeah okay so here I post a new
request dto, maybe this thing's, let's

233
01:50:46,900 --> 01:50:56,020
make it a variable, to make it clean so I've
got a reservationRequestDto and then I

234
01:50:56,020 --> 01:51:01,240
pass the reservation request to the adapter yeah,
 I want to go into adapter. create method okay create the

235
01:51:03,550 --> 01:51:11,200
method and instead of returning void I
will return maybe a string which will be

236
01:51:11,200 --> 01:51:17,710
the Json. Here I can
return something much more like asp.net

237
01:51:17,710 --> 01:51:21,940
internal structure to make a
response but I won't go into that here

238
01:51:21,940 --> 01:51:29,640
but as I rationalize it you okay
so here I am in the posts method yeah

239
01:51:29,640 --> 01:51:36,390
that should return me a jsonReservation.
 something like that

240
01:51:36,390 --> 01:51:40,390
why not
yeah so the adapter will return me that

241
01:51:40,390 --> 01:51:46,260
and I will assert on that yeah so
instead of all that

242
01:51:46,410 --> 01:51:51,940
jsonReservation should be equal to
that Json. that objective to target you

243
01:51:51,940 --> 01:51:56,740
know that yeah so it's still right
because I didn't plug the adapter. so

244
01:51:56,740 --> 01:52:03,160
adapter has three steps to
instantiate the entire hexagon structure

245
01:52:03,160 --> 01:52:09,480
but when I mean every method of the
adapter has three steps basically its

246
01:52:09,480 --> 01:52:13,440
first step is to adapt from their infrastructure 
to the domain

247
01:52:13,440 --> 01:52:18,190
second step is to call the business
logic and then the third step is to

248
01:52:18,190 --> 01:52:23,800
adapt from domain answer to the
infrastructure and to return it. yeah you

249
01:52:23,800 --> 01:52:29,860
know what is it about in every method of
adapter so let's make it here, in that
case I don't have to adapt

250
01:52:31,540 --> 01:52:34,679
here so I will just introduce a new
variable

251
01:52:34,679 --> 01:52:40,800
for the number_of_seats and with a
machine liquid in the real life

252
01:52:40,800 --> 01:52:47,640
maybe you you have to serialize yourself
and we simulate this tech because asp.net

253
01:52:47,640 --> 01:52:53,040
do that for us but sometimes
you have to translate the Json in

254
01:52:53,040 --> 01:52:59,820
local variable for a domain object. so here
what I just did is to get some variables

255
01:52:59,820 --> 01:53:04,500
but this is where you will have to
translate transform adjust whatever it

256
01:53:04,500 --> 01:53:10,110
takes to be able to call the
domain logic. yeah Good. so now I call the

257
01:53:10,110 --> 01:53:16,679
hexagon so hexagon.Reserve, it's
a business domain method and I put it

258
01:53:16,679 --> 01:53:23,640
to put it local variable I get and numberOfSeats
number of let me call me

259
01:53:23,640 --> 01:53:36,900
requested okay I called the hexagon,
its return me reservation, since it is a method a
yeah

260
01:53:37,830 --> 01:53:43,710
so has a ration but since it's an async
method I will have to await that and

261
01:53:43,710 --> 01:53:49,500
truth sorry some like that c# to
obtain the sequence call. but since your

262
01:53:49,500 --> 01:53:54,840
method is I think because it's called
also async method I asked you to do so

263
01:53:54,840 --> 01:54:01,020
and then adapt from domain to this is a
method Bruno already done we had adapter

264
01:54:01,020 --> 01:54:05,300
adapter damage sure I provide a
reservation and I get some string and

265
01:54:05,300 --> 01:54:12,090
yeah I guess, to return. you see I get a
reservation from the business logic and

266
01:54:12,090 --> 01:54:22,230
then what I do is to adapt back from
the domain to the json infrastructure. this
is still red what did I miss

267
01:54:26,610 --> 01:54:29,689
[Music]

268
01:54:32,430 --> 01:54:44,650
you have to await also because
of a weight this is Mexican Russian okay
it's green sorry it was async/await

269
01:54:47,020 --> 01:54:52,780
issue. that's time to implement in SSP
net. so here as you can see within one
acceptance test we have done what we

270
01:54:54,460 --> 01:54:59,530
have to do is in composition note of the
application I don't know what you want

271
01:54:59,530 --> 01:55:08,650
to do, well, we have less than 10 minutes
I think what that parts should be the one

272
01:55:08,650 --> 01:55:13,000
that we will put into the setup of the
application so I can do that plug into

273
01:55:13,000 --> 01:55:18,370
the webosphere but maybe it's better to
keep some time for questions or for kind

274
01:55:18,370 --> 01:55:21,969
of wrap up, what do you think? okay
yeah otherwise I think I will have to

275
01:55:21,969 --> 01:55:35,320
run because we kind of little bit late
yeah so wrap up, we started from

276
01:55:35,320 --> 01:55:42,130
situation like this we have a web ticket
manager with a very procedural code do

277
01:55:42,130 --> 01:55:48,450
this and after we lead to some more

278
01:55:48,450 --> 01:55:56,370
consistent and more, I don't know what to
say, short working code also

279
01:55:56,370 --> 01:56:02,800
after Reserve method was kind of something
like this. thing is yes pretty much what

280
01:56:02,800 --> 01:56:09,489
we achieved what's important is that we
embrace the language of our domain
within our code plus legacy code very

281
01:56:12,430 --> 01:56:17,469
crappy and when we if we had time to
executor and append

282
01:56:17,469 --> 01:56:25,050
we will have less warnings we just you
know in second just just in front yeah

283
01:56:25,050 --> 01:56:30,160
so we are talking
about reservations, trains reception

284
01:56:30,160 --> 01:56:35,710
at term present which is fulfilled you
see so much, even if our domain experts

285
01:56:35,710 --> 01:56:42,469
is not able to read our code we can read
in front of him and

286
01:56:42,469 --> 01:56:49,070
being, yeah, being able to have a
discussion and he's being able to say no

287
01:56:49,070 --> 01:56:54,340
no this is not what I want for that
system. so there is less

288
01:56:54,340 --> 01:57:00,199
friction there is less gaps between what
we implemented what we was talking about.
so it's better if you want to follow him

289
01:57:04,360 --> 01:57:11,810
yeah we had some called ndependent show it in
a few seconds, but just before that

290
01:57:11,810 --> 01:57:19,310
yeah that's because it takes time to
switch as a final wrap-up we did not

291
01:57:19,310 --> 01:57:23,810
have to time to to make you feel that
because automate expertise in Paris and

292
01:57:23,810 --> 01:57:29,120
our first version was with him on stage
but it's crucial to talk to your domain
experts yeah most of the project has

293
01:57:31,429 --> 01:57:36,710
issue because the developers are not even
allowed to talk to domain experts.

294
01:57:36,710 --> 01:57:41,239
so for me so no it's a no-go I finish I
decide not to go to the project if it's
like this, but it wasn't the case at the

295
01:57:43,370 --> 01:57:50,300
beginning of my career so takes yes it
takes courage time determination to

296
01:57:50,300 --> 01:57:58,120
enforce that. but it's crucial otherwise
yeah not as if they don't buy the legacy

297
01:57:58,120 --> 01:58:04,610
because I'm a coach and I learn how to
refactor the code generate people when

298
01:58:04,610 --> 01:58:09,560
there is dependencies said my code is
not testable actually we can test any

299
01:58:09,560 --> 01:58:16,820
code any code so don't be daunted by it
I guess you may have some gut to do so yeah it
cost I but it's doable yeah and also

300
01:58:21,530 --> 01:58:27,080
it's we don't use a lot of techniques
here we basically use two basic

301
01:58:27,080 --> 01:58:30,260
techniques from the refactoring book of
Martin Fowler

302
01:58:30,260 --> 01:58:35,780
it's extract and move methods so it's
pretty much simple as soon as you have a
test Alice which is the first steps you

303
01:58:38,199 --> 01:58:44,739
can extract and move very very easily
the more complicated is to find some

304
01:58:44,739 --> 01:58:53,640
proper semantics and to and to invest in
your domain design they we have great

305
01:58:53,640 --> 01:58:57,930
in track of improvement as you just said
by some of you. yes this is something

306
01:58:57,930 --> 01:59:05,730
that is a living and ensuring you have
yeah you have been very interactive user
so thank you very much

307
01:59:07,190 --> 01:59:12,340
[Applause]
